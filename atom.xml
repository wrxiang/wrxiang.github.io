<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Never</title>
  
  <subtitle>认真的人才有资格开玩笑</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wrxiang.top/"/>
  <updated>2021-10-07T10:08:33.947Z</updated>
  <id>http://wrxiang.top/</id>
  
  <author>
    <name>风烟景</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TortoiseGit配置Git</title>
    <link href="http://wrxiang.top/2021/08/15/TortoiseGit%E9%85%8D%E7%BD%AEGit/"/>
    <id>http://wrxiang.top/2021/08/15/TortoiseGit配置Git/</id>
    <published>2021-08-15T12:35:34.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Git-2.32.0-64<br>TortoiseGit 2.12.0.0</p></blockquote><a id="more"></a><h2 id="安装相应的软件"><a href="#安装相应的软件" class="headerlink" title="安装相应的软件"></a>安装相应的软件</h2><ol><li>下载和安装Git，下载地址<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a></li><li>下载和安装TortoiseGit，下载地址<a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">TortoiseGit</a></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h3><p>桌面上邮件菜单，选择 <strong>TortoiseGit</strong> -&gt; <strong>设置</strong>，配置Git的用户名以及邮箱，如下图所示：<br><img src="https://i.loli.net/2021/08/15/sUDG6ZnMkSPHvNi.png" alt="20210815124800.png"><br><img src="https://i.loli.net/2021/08/15/fepXZW3cMA8BSPY.png" alt="20210815124959.png"></p><h3 id="生成公钥和密钥"><a href="#生成公钥和密钥" class="headerlink" title="生成公钥和密钥"></a>生成公钥和密钥</h3><p>进入TortoiseGit安装目录下的bin目录，双击 <code>PuTTYgen.exe</code> 进入PuTTY Key Generator，操作步骤如下</p><ol><li>点击<strong>Generate</strong>按钮生成公钥，注意生成过程中鼠标不要划过进度条，有可能会导致进度条停止不动</li><li>点击<strong>Save public key</strong>，保存生成的公钥</li><li>点击<strong>Save private key</strong>，保存生成的私钥</li></ol><p><img src="https://i.loli.net/2021/08/15/9OyrYEb6gDABLRM.png" alt="20210815125911.png"></p><h3 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h3><p>进入TortoiseGit安装目录下的bin目录，双击 <code>pageant.exe</code>，如果提示已运行，在托盘程序中找到该程序双击一下即可<br>点击 <strong>Add Key</strong>按钮添加上一步中生成的私钥文件即可</p><p><img src="https://i.loli.net/2021/08/15/sjWo1xa3FDtBAZL.png" alt="20210815130506.png"></p><h3 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h3><p>在代码托管系统中配置公钥，下面以github为例<br>在GitHub设置中选择 <strong>SSH and GPG kes</strong>，添加SSH key<br><img src="https://i.loli.net/2021/08/15/OWJMZKbenqjN3YT.png" alt="20210815131153.png"><br>选择<strong>New SSH key</strong>，将title以及公钥信息填写进去，点击保存即可<br><img src="https://i.loli.net/2021/08/15/cveXY2I5uhmFDTs.png" alt="20210815131530.png"></p><h2 id="代码同步"><a href="#代码同步" class="headerlink" title="代码同步"></a>代码同步</h2><p>在文件夹中右键选择 <strong>Git 克隆</strong>，填写代码库的地址以及本地文件夹地址，并且选择 <strong>加载Putty密钥</strong>选项，并且选择生成的私钥文件(后缀名为.ppk的文件)，点击确定后将代码拉取到本地，之后更改后进行上传推送即可<br><img src="https://i.loli.net/2021/08/15/MmxIlt16wo3PWqV.png" alt="20210815131936.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git-2.32.0-64&lt;br&gt;TortoiseGit 2.12.0.0&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="git" scheme="http://wrxiang.top/categories/git/"/>
    
    
      <category term="TortoiseGit" scheme="http://wrxiang.top/tags/TortoiseGit/"/>
    
      <category term="git" scheme="http://wrxiang.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>windosw系统配置nginx实现https访问</title>
    <link href="http://wrxiang.top/2020/04/04/nginx/"/>
    <id>http://wrxiang.top/2020/04/04/nginx/</id>
    <published>2020-04-04T20:17:21.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><p>在<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">官网</a>下载和系统匹配的nginx，解压即可</p><h1 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h1><p>由于代理https需要使用证书，这里我们使用OpenSSL生成自签名的证书，可以下载与系统相匹配的OpenSSL程序进行安装，安装过程一直下一步即可，<a href="http://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">下载地址</a><br><a id="more"></a></p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><ol><li>新增环境变量 <code>OPENSSL_HOME</code>，变量值为 <code>D:\OpenSSL-Win64</code>，指向OpenSSL的安装路径</li><li>新增环境变量 <code>OPENSSL_CONF</code>，变量值为 <code>D:\OpenSSL-Win64\bin\openssl.cfg</code>，指向openssl.cfg文件目录</li><li>在环境变量path的末尾添加 <code>%OPENSSL_HOME%\bin</code></li></ol><h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><p>在nginx安装目录创建 <code>ssl</code>文件夹，用于存放证书，如我的是 <code>F:\nginx-1.16.1\ssl</code>，以管理员权限运行cmd并进入创建的ssl目录</p><h2 id="创建私钥"><a href="#创建私钥" class="headerlink" title="创建私钥"></a>创建私钥</h2><p>在命令行中执行命令 <code>openssl genrsa -des3 -out demo.key 1024</code> ，demo是私钥文件名，可以自定义，此处需要输入和验证密码，输入的密码请记住，后面会用到，这里输入的密码是 <code>123456</code><br><img src="https://i.loli.net/2020/04/04/fyEH1oQ7O5iPgub.png" alt="1586003554_1_.png"></p><h2 id="创建crs证书"><a href="#创建crs证书" class="headerlink" title="创建crs证书"></a>创建crs证书</h2><p>在命令行中执行 <code>openssl req -new -key demo.key -out demo.csr</code>，其中key文件就是第一步生成的私钥，demo为自定义的文件名，如下所示，这里主要设置的是国家地区以及组织的一些信息，其中最重要的是 <code>Common Name</code>，这里输入的就是我们要用https访问的域名，也是nginx中所要配置的 <code>server_name</code>，完成所有步骤后，ssl文件夹中会生成demo.csr和demo.key两个文件<br><img src="https://i.loli.net/2020/04/04/uhPa4kM5n8V2ywS.png" alt="1586004067_1_.png"></p><h2 id="去除密码"><a href="#去除密码" class="headerlink" title="去除密码"></a>去除密码</h2><p>在加载SSL支持的Nginx并使用上述私钥时除去必须的口令，否则会在启动nginx的时候需要输入密码。复制demo.key并重命名为demo.key.org。<br>在命令行中执行此命令：<code>openssl rsa -in demo.key.org -out demo.key</code>  如下图所示，此命令需要输入刚才设置的密码。</p><h2 id="生成crt证书"><a href="#生成crt证书" class="headerlink" title="生成crt证书"></a>生成crt证书</h2><p>在命令行中执行此命令：<code>openssl x509 -req -days 365 -in demo.csr -signkey demo.key -out demo.crt</code></p><p>证书生成完毕，我们在ssl文件夹中可以看到生辰的证书文件，我们要用到的就是demo.crt和demo.key。</p><h1 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h1><p>在nginx.conf配置文件中添加一个如下server<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>  <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span>  www.demo.com;</span><br><span class="line">        <span class="attribute">ssl_certificate</span>      F:/nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>/ssl/demo.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  F:/nginx-<span class="number">1</span>.<span class="number">16</span>.<span class="number">1</span>/ssl/demo.key;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">          <span class="attribute">root</span>   html;</span><br><span class="line">          <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h1><p>正常启动nginx后，使用 <a href="https://127.0.0.1:443" target="_blank" rel="noopener">https://127.0.0.1:443</a> 访问，可以正常跳转<br><img src="https://i.loli.net/2020/04/04/sVy5LqpgtQ6UGMC.png" alt="20181031234338193.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;headerlink&quot; title=&quot;安装nginx&quot;&gt;&lt;/a&gt;安装nginx&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;http://nginx.org/en/download.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;下载和系统匹配的nginx，解压即可&lt;/p&gt;
&lt;h1 id=&quot;安装OpenSSL&quot;&gt;&lt;a href=&quot;#安装OpenSSL&quot; class=&quot;headerlink&quot; title=&quot;安装OpenSSL&quot;&gt;&lt;/a&gt;安装OpenSSL&lt;/h1&gt;&lt;p&gt;由于代理https需要使用证书，这里我们使用OpenSSL生成自签名的证书，可以下载与系统相匹配的OpenSSL程序进行安装，安装过程一直下一步即可，&lt;a href=&quot;http://slproweb.com/products/Win32OpenSSL.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://wrxiang.top/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wrxiang.top/tags/nginx/"/>
    
      <category term="反向代理" scheme="http://wrxiang.top/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>用数据泵远程导出Oracle数据库</title>
    <link href="http://wrxiang.top/2020/03/28/%E7%94%A8%E6%95%B0%E6%8D%AE%E6%B3%B5%E8%BF%9C%E7%A8%8B%E5%AF%BC%E5%87%BAOracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://wrxiang.top/2020/03/28/用数据泵远程导出Oracle数据库/</id>
    <published>2020-03-28T15:49:18.000Z</published>
    <updated>2021-10-07T10:08:33.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>项目上做运维时，经常不知道客户数据库服务器远程访问的用户名和密码，只知道Oracle数据库的链接信息。Oracle11g以后数据库备份如果使用exp命令进行，经常有些表导出不成功或者出错，用expdp命令导出的话，备份文件又在服务器上，取不出来。这种情况下如果使用expdp命令导出，又想要备份文件保存在本地，则可以使用此方法。<br>前提：本地必须要有Oracle数据库，因为导出操作在本地数据库进行<br>操作目的：导出 10.96.37.30/orcl，用户为platform的数据库</p><a id="more"></a><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>在本地Oracle执行以下SQL命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建表空间</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLESPACE</span> BS_CKB <span class="keyword">DATAFILE</span> <span class="string">'S:/ORADATA/BSPHIS/BS_CKB.DBF'</span> <span class="keyword">SIZE</span> <span class="number">5000</span>M <span class="keyword">AUTOEXTEND</span> <span class="keyword">ON</span> <span class="keyword">NEXT</span> <span class="number">500</span>M <span class="keyword">EXTENT</span> <span class="keyword">MANAGEMENT</span> <span class="keyword">LOCAL</span> <span class="keyword">UNIFORM</span> <span class="keyword">SIZE</span> <span class="number">256</span>K;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建用户并赋予权限</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> BSCKB <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"bsoft"</span> <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> BS_CKB  <span class="keyword">TEMPORARY</span> <span class="keyword">TABLESPACE</span> TEMP PROFILE <span class="keyword">DEFAULT</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> BSCKB;</span><br><span class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> BSCKB;</span><br><span class="line"><span class="keyword">GRANT</span> IMP_FULL_DATABASE <span class="keyword">TO</span> BSCKB;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">RESOURCE</span> <span class="keyword">TO</span> BSCKB;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> <span class="keyword">SYNONYM</span> <span class="keyword">TO</span> BSCKB;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">UNLIMITED</span> <span class="keyword">TABLESPACE</span> <span class="keyword">TO</span> BSCKB;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建备份目录并授权</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DIRECTORY</span> DIR_BACKUP  <span class="keyword">AS</span> <span class="string">'S:\ORABACKUP\ORABACKUP_DMP'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">READ</span>,WRITE <span class="keyword">ON</span> <span class="keyword">DIRECTORY</span> DIR_BACKUP <span class="keyword">TO</span> BSCKB;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建DB_LINK</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PUBLIC</span> <span class="keyword">DATABASE</span> <span class="keyword">LINK</span> LINK_BSCKB_PLATFORM</span><br><span class="line">  <span class="keyword">CONNECT</span> <span class="keyword">TO</span> platform <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> 密码</span><br><span class="line">  <span class="keyword">USING</span> <span class="string">'10.96.37.30/orcl'</span>;</span><br></pre></td></tr></table></figure></p><p>PLSQL登录源数据库，执行以下命令赋予导出权限：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> EXP_FULL_DATABASE <span class="keyword">TO</span> platform;</span><br></pre></td></tr></table></figure></p><p>在本地电脑的cmd中执行以下命令导出dmp文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expdp BSCKB/bsoft@orcl directory=DIR_BACKUP dumpfile=BSCKB_PLATFORM.dump logfile=BSCKB_PLATFORM.log schemas=platform network_link=LINK_BSCKB_PLATFORM</span><br></pre></td></tr></table></figure></p><p>踩坑记录：在执行导出命令时，提示 <code>ORA-39149: 无法将授权用户链接到非授权用户</code>，是由于没有将源数据库用户赋予 <code>EXP_FULL_DATABASE</code> 权限，赋予权限后还是报错提示没有权限<br>解决方法：创建db_link时直接使用dba用户创建，导出命令中指定需要导出的用户即可</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h2&gt;&lt;p&gt;项目上做运维时，经常不知道客户数据库服务器远程访问的用户名和密码，只知道Oracle数据库的链接信息。Oracle11g以后数据库备份如果使用exp命令进行，经常有些表导出不成功或者出错，用expdp命令导出的话，备份文件又在服务器上，取不出来。这种情况下如果使用expdp命令导出，又想要备份文件保存在本地，则可以使用此方法。&lt;br&gt;前提：本地必须要有Oracle数据库，因为导出操作在本地数据库进行&lt;br&gt;操作目的：导出 10.96.37.30/orcl，用户为platform的数据库&lt;/p&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://wrxiang.top/categories/Oracle/"/>
    
    
      <category term="oracle" scheme="http://wrxiang.top/tags/oracle/"/>
    
      <category term="expdp" scheme="http://wrxiang.top/tags/expdp/"/>
    
  </entry>
  
  <entry>
    <title>什么是Spring Boot</title>
    <link href="http://wrxiang.top/2020/02/23/%E4%BB%80%E4%B9%88%E6%98%AFSpring-Boot/"/>
    <id>http://wrxiang.top/2020/02/23/什么是Spring-Boot/</id>
    <published>2020-02-23T14:34:42.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a>什么是Spring Boot</h1><p>Spring Boot是由Pivotal团队提供的全新框架，目的是为了简化Spring应用的搭建以及开发，框架使用了特定的方式来进行配置从而减少了开发者对框架的配置，它默认配置了很多框架的使用方式，就像Maven整合了所有的jar包，spring boot整合了所有的框架。</p><h1 id="使用Spring-Boot的好处"><a href="#使用Spring-Boot的好处" class="headerlink" title="使用Spring Boot的好处"></a>使用Spring Boot的好处</h1><p>使用Spring Boot最大的好处就是简单、快速、便捷，比如我们如果需要搭建一个基于Spring的Web项目，那么我们首先需要：</p><ol><li>配置Web.xml，加载Spring和Spring MVC</li><li>配置数据库连接，配置Spring事务</li><li>配置加载文件读取，开启注解</li><li>配置日志文件</li><li>。。。</li><li>所有配置完成后，部署tomcat进行调试</li><li>。。。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Spring-Boot&quot;&gt;&lt;a href=&quot;#什么是Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;什么是Spring Boot&quot;&gt;&lt;/a&gt;什么是Spring Boot&lt;/h1&gt;&lt;p&gt;Spring Boot是由Pivotal团队
      
    
    </summary>
    
      <category term="Spring" scheme="http://wrxiang.top/categories/Spring/"/>
    
    
      <category term="Spring boot" scheme="http://wrxiang.top/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper实现服务注册与发现</title>
    <link href="http://wrxiang.top/2020/02/20/Zookeeper%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <id>http://wrxiang.top/2020/02/20/Zookeeper实现服务注册与发现/</id>
    <published>2020-02-20T14:21:29.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在分布式架构中，系统经常被暴漏为服务供其他系统调用，为使系统间能够相互通信，需要有一个协调系统来管理这些服务，这就是服务注册与服务发现，这个协调者也被称之为注册中心。<br>下面基于zookeeper来实现一个简单的服务注册与发现功能<br><a id="more"></a><br>通过Maven引入需要的jar包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>创建服务注册类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wrxiang.zk.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkServiceRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZkClient zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registry</span><span class="params">(String serviceName, String serviceAddress)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        zkClient = <span class="keyword">new</span> ZkClient(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建registry节点</span></span><br><span class="line">        String registryAddress = <span class="string">"/services"</span>;</span><br><span class="line">        <span class="keyword">if</span>(!zkClient.exists(registryAddress))&#123;</span><br><span class="line">            zkClient.createPersistent(registryAddress);</span><br><span class="line">            System.out.println(<span class="string">"创建服务注册节点"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建service节点</span></span><br><span class="line">        String servicePath = registryAddress + <span class="string">"/"</span> + serviceName;</span><br><span class="line">        <span class="keyword">if</span>(!zkClient.exists(servicePath))&#123;</span><br><span class="line">            zkClient.createPersistent(servicePath);</span><br><span class="line">            System.out.println(<span class="string">"创建服务节点，服务名："</span> + serviceName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建address节点（临时）</span></span><br><span class="line">        String addressPath = servicePath + <span class="string">"/address-"</span>;</span><br><span class="line">        String addressNode = zkClient.createEphemeralSequential(addressPath, serviceAddress);</span><br><span class="line">        System.out.println(<span class="string">"创建服务地址节点："</span> + addressNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建服务发现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wrxiang.zk.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkServiceDiscovery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; addressCache = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZkClient zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">discovery</span><span class="params">(String serviceName)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        zkClient= <span class="keyword">new</span> ZkClient(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">        String servicePath =  <span class="string">"/services/"</span> + serviceName;</span><br><span class="line">        <span class="keyword">if</span>(!zkClient.exists(servicePath))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"未发现服务节点："</span> + servicePath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String address;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先从本地系统缓存中取</span></span><br><span class="line">        <span class="keyword">if</span>(addressCache.size() == <span class="number">1</span>)&#123;</span><br><span class="line">            address = addressCache.get(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(addressCache.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            address = addressCache.get(ThreadLocalRandom.current().nextInt(addressCache.size()));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//从ZK注册中心中取</span></span><br><span class="line">            List&lt;String&gt; addressList = zkClient.getChildren(servicePath);</span><br><span class="line">            addressCache.clear();</span><br><span class="line">            addressCache.addAll(addressList);</span><br><span class="line"></span><br><span class="line">            zkClient.subscribeChildChanges(servicePath,(parentPath,currentChilds)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">"监听服务节点发生变化："</span> + parentPath);</span><br><span class="line">                addressCache.clear();</span><br><span class="line">                addressCache.addAll(currentChilds);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(CollectionUtils.isEmpty(addressCache))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"未发现有效的服务节点"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(addressList.size() == <span class="number">1</span>)&#123;</span><br><span class="line">                address = addressList.get(<span class="number">0</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                address = addressList.get(ThreadLocalRandom.current().nextInt(addressList.size()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取实际地址</span></span><br><span class="line">        String addressPath = servicePath + <span class="string">"/"</span> + address;</span><br><span class="line">        String hostAndPort = zkClient.readData(addressPath);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"获取到实际访问地址："</span> + hostAndPort);</span><br><span class="line">        zkClient.close();</span><br><span class="line">        <span class="keyword">return</span> hostAndPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wrxiang.zk.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String serviceName = <span class="string">"test.com"</span>;</span><br><span class="line"></span><br><span class="line">        ZkServiceRegistry registry = <span class="keyword">new</span> ZkServiceRegistry();</span><br><span class="line">        registry.registry(serviceName,<span class="string">"192.168.3.1:8080"</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        ZkServiceDiscovery zkServiceDiscovery = <span class="keyword">new</span> ZkServiceDiscovery();</span><br><span class="line">        zkServiceDiscovery.discovery(serviceName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动zookeeper，然后运行测试类，可以发现服务能够正常注册到zookeeper，也能够被正常的发现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;在分布式架构中，系统经常被暴漏为服务供其他系统调用，为使系统间能够相互通信，需要有一个协调系统来管理这些服务，这就是服务注册与服务发现，这个协调者也被称之为注册中心。&lt;br&gt;下面基于zookeeper来实现一个简单的服务注册与发现功能&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://wrxiang.top/categories/Java/"/>
    
    
      <category term="zookeeper" scheme="http://wrxiang.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>基于Zookeeper实现统一配置管理</title>
    <link href="http://wrxiang.top/2020/02/19/%E5%9F%BA%E4%BA%8EZookeeper%E5%AE%9E%E7%8E%B0%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://wrxiang.top/2020/02/19/基于Zookeeper实现统一配置管理/</id>
    <published>2020-02-19T22:56:12.000Z</published>
    <updated>2021-10-07T10:08:33.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要统一配置？"><a href="#为什么需要统一配置？" class="headerlink" title="为什么需要统一配置？"></a>为什么需要统一配置？</h2><p>&emsp;&emsp;我们在开发系统时，一般会将一些信息添加到配置文件中，比如数据库信息、日志等，如果需要更改也是修改配置文件然后再发布到生产中，这种方式在集群的环境下就会显得很麻烦。那么有什么解决方法呢？</p><ol><li>将公共配置抽取出来</li><li>提供统一的配置入口对公共配置进行修改</li><li>修改后的内容能够同步到各集群系统中<a id="more"></a></li></ol><h2 id="Zookeeper方案"><a href="#Zookeeper方案" class="headerlink" title="Zookeeper方案"></a>Zookeeper方案</h2><p>&emsp;&emsp;这里我们采取zookeeper实现统一配置管理，配置信息存放在zookeeper的节点中，一旦配置信息发生改变，zk会通知监听该节点的客户端系统，客户端系统获取最新的配置信息，然后进行配置信息的重新载入。<br>下面基于zookeeper实现了一个粗略的统一配置管理<br>通过Maven引入zkclient.jar<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>创建配置信息实体 Config.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wrxiang.zk.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3960940730727782588L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Config</span><span class="params">(String userName, String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Config&#123;"</span> +</span><br><span class="line">                <span class="string">"userName='"</span> + userName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置管理中心ZkConfigMag<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wrxiang.zk.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkConfigMag</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Config config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟获取配置文件，从数据库加载或从前台获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Config <span class="title">downLoadConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        config = <span class="keyword">new</span> Config(<span class="string">"test"</span>, <span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新配置信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upLoadConfig</span><span class="params">(String userName, String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(config == <span class="keyword">null</span>)&#123;</span><br><span class="line">            config = <span class="keyword">new</span> Config(userName, password);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            config.setUserName(userName);</span><br><span class="line">            config.setPassword(password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncConfigToZk</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ZkClient zkClient = <span class="keyword">new</span> ZkClient(<span class="string">"127.0.0.1:2181"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!zkClient.exists(<span class="string">"/zkConfig"</span>))&#123;</span><br><span class="line">            zkClient.createPersistent(<span class="string">"/zkConfig"</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        zkClient.writeData(<span class="string">"/zkConfig"</span>, config);</span><br><span class="line">        zkClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>应用监听实现ZkGetConfigClient<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wrxiang.zk.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkDataListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkGetConfigClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Config config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Config <span class="title">getConfig</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ZkClient zkClient = <span class="keyword">new</span> ZkClient(<span class="string">"127.0.0.1:2181"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!zkClient.exists(<span class="string">"/zkConfig"</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"配置信息节点不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        config = zkClient.readData(<span class="string">"/zkConfig"</span>);</span><br><span class="line">        System.out.println(<span class="string">"加载到配置信息："</span> + config.toString());</span><br><span class="line"></span><br><span class="line">        zkClient.subscribeDataChanges(<span class="string">"/zkConfig"</span>, <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String s, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                config = (Config)o;</span><br><span class="line">                System.out.println(<span class="string">"监听到配置信息被修改"</span> + config.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                config = <span class="keyword">null</span>;</span><br><span class="line">                System.out.println(<span class="string">"监听到配置信息被删除"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试，启动配置管理中心<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wrxiang.zk.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkConfigTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ZkConfigMag zkConfigMag = <span class="keyword">new</span> ZkConfigMag();</span><br><span class="line">        Config config = zkConfigMag.downLoadConfig();</span><br><span class="line">        System.out.println(<span class="string">"初始化加载配置信息："</span> + config.toString());</span><br><span class="line">        zkConfigMag.syncConfigToZk();</span><br><span class="line">        System.out.println(<span class="string">"同步配置信息至zookeeper"</span>);</span><br><span class="line"></span><br><span class="line">        ZkGetConfigClient zkGetConfigClient = <span class="keyword">new</span> ZkGetConfigClient();</span><br><span class="line">        zkGetConfigClient.getConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停一会</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        zkConfigMag.upLoadConfig(<span class="string">"test222"</span>, <span class="string">"3336666"</span>);</span><br><span class="line">        System.out.println(<span class="string">"修改配置文件："</span> + config.toString());</span><br><span class="line">        zkConfigMag.syncConfigToZk();</span><br><span class="line">        System.out.println(<span class="string">"同步配置文件至zookeeper"</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动测试后，控制台输出<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">初始化加载配置信息：Config&#123;<span class="attribute">userName</span>=<span class="string">'test'</span>, <span class="attribute">password</span>=<span class="string">'123'</span>&#125;</span><br><span class="line">同步配置信息至zookeeper</span><br><span class="line">加载到配置信息：Config&#123;<span class="attribute">userName</span>=<span class="string">'test'</span>, <span class="attribute">password</span>=<span class="string">'123'</span>&#125;</span><br><span class="line">修改配置文件：Config&#123;<span class="attribute">userName</span>=<span class="string">'test222'</span>, <span class="attribute">password</span>=<span class="string">'3336666'</span>&#125;</span><br><span class="line">同步配置文件至zookeeper</span><br><span class="line">监听到配置信息被修改Config&#123;<span class="attribute">userName</span>=<span class="string">'test222'</span>, <span class="attribute">password</span>=<span class="string">'3336666'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>通过上述例子介绍如何使用zokeeper实现简单的配置管理，实际系统应用肯定更加复杂，但是原理类似。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么需要统一配置？&quot;&gt;&lt;a href=&quot;#为什么需要统一配置？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要统一配置？&quot;&gt;&lt;/a&gt;为什么需要统一配置？&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我们在开发系统时，一般会将一些信息添加到配置文件中，比如数据库信息、日志等，如果需要更改也是修改配置文件然后再发布到生产中，这种方式在集群的环境下就会显得很麻烦。那么有什么解决方法呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将公共配置抽取出来&lt;/li&gt;
&lt;li&gt;提供统一的配置入口对公共配置进行修改&lt;/li&gt;
&lt;li&gt;修改后的内容能够同步到各集群系统中
    
    </summary>
    
      <category term="java" scheme="http://wrxiang.top/categories/java/"/>
    
    
      <category term="zookeeper" scheme="http://wrxiang.top/tags/zookeeper/"/>
    
      <category term="配置管理" scheme="http://wrxiang.top/tags/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper可以做什么？</title>
    <link href="http://wrxiang.top/2020/02/19/Zookeeper%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://wrxiang.top/2020/02/19/Zookeeper可以做什么？/</id>
    <published>2020-02-19T18:39:34.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Zookeeper是一个分布式服务框架，是Apache Hadoop的一个子项目，它主要用于解决分布式应用中经常遇到的一些数据管理问题，比如配置管理、命名服务、分布式锁、集群管理等。<br>刚接触zookeeper的时候有些云里雾里，不知从哪里入手好，其实简单的说zookeeper就是 <strong>文件系统 + 监听通知机制</strong>。<br><a id="more"></a></p><h1 id="系统原理"><a href="#系统原理" class="headerlink" title="系统原理"></a>系统原理</h1><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>在zookeeper中维护了类似Unix系统的树形文件节点，可以往这个节点中存储或者获取数据，我们将这些节点称为znode，每个znode默认能够存储1Mb的数据，znode有四种不同的类型。</p><ul><li><strong>PERSISTENT 持久化目录节点</strong> 所谓持久节点就是指节点创建后，除非进行删除操作就一直存在，不会因创建该节点的客户端会话失效或者zookeeper服务停止而消失</li><li><strong>PERSISTENT_SEQUENTIAL 持久化顺序编号节点 </strong> 和持久节点基本特性一致，额外的特点是，每个父节点会为他的第一级子节点维护一份时序，会记录每个子节点创建的先后顺序。在创建子节点的过程中，zookeeper会自动给子节点的名称后面增加一个数字后缀。例如创建名为”test”的子节点，zookeeper会给 “test_“ 后自动补充数字。</li><li><strong>EPHEMERAL 临时目录节点</strong> 和持久节点不同，临时节点的生命周期和客户端会话绑定，也就是说，如果客户端会话失效，那么这个节点会被自动清除掉。这里有几点需要注意，首先这里说的是会话失效而不是连接断开，其次临时节点下不能创建子节点，另外客户端会话失效后，所有的节点也不是瞬间消失，而是要过一段时间，大概10s以内。</li><li><strong>EPHEMERAL_SEQUENTIAL 临时顺序编号目录节点</strong> 节点属于临时节点，不过创建的子节点带有顺序，客户端会话结束节点会自动消失。</li></ul><p>&emsp;&emsp;通过上面的节点类型可以看出，znode的节点有临时/持久，顺序/无序两大类，组合成四种不同的节点类型。</p><h2 id="监听通知机制"><a href="#监听通知机制" class="headerlink" title="监听通知机制"></a>监听通知机制</h2><p>&emsp;&emsp;客户端注册到zookeeper上监听它所关心的目录节点，当目录节点发生变化（数据改变、节点被删除、子目录节点增加或删除）时，zookeeper会通知客户端该节点发生了变化。</p><h1 id="Zookeeper的作用"><a href="#Zookeeper的作用" class="headerlink" title="Zookeeper的作用"></a>Zookeeper的作用</h1><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>&emsp;&emsp;在我们的应用程序肯定会有很多的配置，例如数据库连接、日志等。一般都是通过配置文件的方式引入系统，当我们只有少数几种配置或只有一台服务器，并且不经常修改的情况下，这是一种很好的做法，但是当我们的配置文件非常多，存在很多应用服务器，那么在修改配置文件的时候是一件很恐怖的事情。这个时候就需要一种集中管理配置的方法，在这个集中管理的地方修改了配置，所有关系这个配置的地方都能获取变更并进行修改。<br>&emsp;&emsp;那么zookeeper如何实现呢？我们将配置信息放到zookeeper的某个目录节点中，然后所有相关的应用程序对这个目录节点进行监听，一旦配置信息发生变化，每个应用程序都会收到zookeeper的通知，然后从zookeeper中获取最新的配置信息。</p><h2 id="命名服务"><a href="#命名服务" class="headerlink" title="命名服务"></a>命名服务</h2><p>&emsp;&emsp;命名服务就比较好理解了，以网络访问为例，通常我们如果要访问一个系统，需要知道这个系统服务的ip，但是ip对人来说是不友好的，那么我们可以通过域名来访问，但是计算机是无法直接识别出域名的。如果我们每台计算机上都存在一份域名到ip的映射，那么可以简单的解决这一问题。但是如果域名对应的ip发生了变化怎么办呢？于是我们有了DNS这个东西，我们只需要访问一个大家都熟知的点，它会告诉你这个域名对应的ip是什么。<br>&emsp;&emsp;而在我们的系统中存在类似的问题，当我们的服务特别多时，保存或者配置服务的地址就会变得非常不方便，同样的，如果我们访问一个大家都熟悉的点，这里提供统一的入口，在进行服务调用时不需要关心服务的具体地址,那么维护起来就方便的多了。<br>&emsp;&emsp;以两个服务调用为例,被调用的服务首先在zookeeper上创建以服务名命名的持久化顺序编号目录节点，然后创建临时子节点存储地址信息，为什么要创建一个父节点然后在子节点中存储地址信息呢？因为被调用方有可能是集群服务，那么就有多个地址可供访问。调用方根据服务名去zookeeper中获取创建的持久化顺序编号的目录节点，子节点若有多个的话随机获取一个得到子节点存储的地址信息。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>&emsp;&emsp;为保证系统的可靠性，一般是将系统进行集群部署，如果一个任务每个集群中的服务都要运行的话就要相互协调，防止数据的不一致性。通常的做法是使用分布式锁，当一个服务持有锁的时候，其他服务等待，一旦锁释放，其他服务竞争锁，然后得到锁的服务运行，其他服务继续等待锁（这里只是简单的原理，实际肯定更为复杂）。<br>&emsp;&emsp;zookeeper实现分布式锁是利用文件系统的顺序编号目录节点，首先创建一个持久化顺序节点，每个线程或者系统获取锁前先创建自己的子目录节点，释放锁时删除自己创建的节点。由于子节点存在顺序并且递增，可以规定最小的那个节点获得锁，每个线程或者系统创建完属于自己的子节点后判断该节点是否最小，最小则获得锁，否则等待通知，只需要等待前一个节点的通知即可。当锁释放即节点删除时，后一个接到通知占有锁。这样第一个通知第二个，第二个通知第三个，击鼓传花似的依次向后。</p><h2 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h2><p>&emsp;&emsp;在分布式集群服务中，经常由于各种原因，比如硬件故障、网络问题、软件故障等，某些节点会进进出出，既有新的节点加入进来也有老的节点退出，这个时候集群的其他机器需要感知到这种变化，然后根据这种变化制订响应的策略。比如在一个分布式架构的系统中，服务是一个集群提供的，当消费者访问某个服务时，就需要采取某些机制发现现在还有哪些节点可以提供该服务，这也称之为服务发现。这里可以和zookeeper的命名服务配合理解，被调用方创建临时目录存储调用地址，如若退出集群，临时节点删除，消费者自然无法发现该服务。</p><h1 id="设计目的"><a href="#设计目的" class="headerlink" title="设计目的"></a>设计目的</h1><ol><li>最终一致性：client 不论连接到哪个 Server，展示给它都是同一个视图，这是 zookeeper 最重要的性能。</li><li>可靠性：具有简单、健壮、良好的性能，如果消息 m 被到一台服务器接受，那么它 将被所有的服务器接受。</li><li>实时性：Zookeeper 保证客户端将在一个时间间隔范围内获得服务器的更新信息，或 者服务器失效的信息。但由于网络延时等原因，Zookeeper 不能保证两个客户端能同时得到 刚更新的数据，如果需要最新数据，应该在读数据之前调用 sync()接口。</li><li>等待无关（wait-free）：慢的或者失效的 client 不得干预快速的 client 的请求，使得每 个 client 都能有效的等待。</li><li>原子性：更新只能成功或者失败，没有中间状态。</li><li>顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息 a 在消息 b 前发布，则在所有 Server 上消息 a 都将在消息 b 前被发布；偏序是指如果一个消息 b 在消 息 a 后被同一个发送者发布，a 必将排在 b 前面。</li></ol><h1 id="Zookeeper集群中的角色"><a href="#Zookeeper集群中的角色" class="headerlink" title="Zookeeper集群中的角色"></a>Zookeeper集群中的角色</h1><p>zookeeper集群中的角色主要有以下三类：</p><ol><li>领导者 Leader： 领导者负责进行投票的发起和决议，更新系统状态</li><li>学习者 Learner<ul><li>跟随者 Follower： 跟随者用于接收客户端请求并向客户端返回结果，在选主过程中参与投票</li><li>观察者 Observer：观察者可以接收客户端连接，将写请求转发给leader节点，但观察者不参与投票过程，只同步leader的状态，观察者的目的是为了扩展系统，提高读取速度</li></ul></li><li>客户端 Client：请求发起方</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;Zookeeper是一个分布式服务框架，是Apache Hadoop的一个子项目，它主要用于解决分布式应用中经常遇到的一些数据管理问题，比如配置管理、命名服务、分布式锁、集群管理等。&lt;br&gt;刚接触zookeeper的时候有些云里雾里，不知从哪里入手好，其实简单的说zookeeper就是 &lt;strong&gt;文件系统 + 监听通知机制&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://wrxiang.top/categories/java/"/>
    
    
      <category term="zookeeper" scheme="http://wrxiang.top/tags/zookeeper/"/>
    
      <category term="应用详解" scheme="http://wrxiang.top/tags/%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>HIS系统开发 产品 or 项目</title>
    <link href="http://wrxiang.top/2020/01/25/HIS%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91-%E4%BA%A7%E5%93%81-or-%E9%A1%B9%E7%9B%AE/"/>
    <id>http://wrxiang.top/2020/01/25/HIS系统开发-产品-or-项目/</id>
    <published>2020-01-25T18:16:14.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>HIS系统即医院信息系统(全称为Hospital Information System) ，而HIS厂商对于系统的开发和交付大致是两种模式，项目化开发以及产品化开发。项目化开发模式下代码单独拉出一个分支，该分支对应着该医院项目，医院所有的需求以及bug均在该分支上修改。另一种是类似saas系统的开发模式，也就是常说的产品化开发方式，无论项目有多少，代码是一套，标准化的流程，功能可配置。<br>显而易见产品化开发方式，对于软件开发以及交付来说有极大的优势，然而在软件交付过程中，产品化方式却存在着诸多的问题，困扰着开发以及交付人员。问题主要在于医院对于HIS系统个性化需求多，而且差异比较大。<br><a id="more"></a></p><h1 id="为什么有如此多的个性化需求"><a href="#为什么有如此多的个性化需求" class="headerlink" title="为什么有如此多的个性化需求"></a>为什么有如此多的个性化需求</h1><p>HIS系统从前期的售前到验收，少不了的一个环节就是客户化开发，客开环节主要解决两个问题，一是接口，二是医院对于特定功能的要求。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>HIS系统贯穿医院整个医疗环节，医院绝大多数的系统都要和HIS系统做对接，心电、PACS、检验、病案、移动支付、聚合支付、医保、合理用药、签约、叫号屏、报价屏等等等等，而且每家医院这些系统厂商各不相同，这也就造成了同样是检验系统对接，这家医院使用视图方式对接，那家医院使用http方式传输数据，另一家又要使用webservice，还有使用url直接调用页面的，更关键的是传输数据的格式甚至要求的数据各不相同。<br>之前也有考虑由HIS提供统一的接口标准，由这些厂商来和HIS做对接，但是由于医院项目的复杂性，很多系统不愿意重新做对接，甚至某些系统都没有了维护人员，那你只能按照之前厂商提供的对接方式来进行。另一个方面，像医保接口各省各市的医保接口各不相同，你不可能要求医保来做改造，那么每上线一个新省市的项目，医保就要重新对接。此外，像检查、检验、医保以及移动支付等接口是嵌入到HIS流程当中的，接口没有对接完成，整个流程就有可能进行不下去。</p><h2 id="个性化需求"><a href="#个性化需求" class="headerlink" title="个性化需求"></a>个性化需求</h2><p>各家医院对于HIS系统的个性化需求也是繁杂而且差异性比价大，大到整个业务流程的改造，小到界面列表上多显示一个值，除了功能的改造之外，系统报表也是另一个很大的工作量，做出的报表很难做到各家医院通用。归根到底，HIS系统属于业务系统，无论是业务功能还是数据报表，其中一个很大的作用是为医院管理提供支撑，比如医院要发展挂号预约服务，那他肯定要对预约人员就诊提供一些便利，比如签约人员优先就诊等，那么HIS肯定要根据医院实际的业务流程做相应的改造，而且这部分需求是不可知的，随着医院的发展甚至医疗政策的调整，此类需求是不断变化的。</p><h1 id="产品化开发所遇到的问题"><a href="#产品化开发所遇到的问题" class="headerlink" title="产品化开发所遇到的问题"></a>产品化开发所遇到的问题</h1><p>HIS系统接口繁多而且每个项目个性化需求比较多甚至需求之间存在着差异性，导致产品化开发过程中设计以及开发需要考虑较多。这家医院新增的需求发布，不一定符合其他医院的要求，有些新增的改动对于一些信息化程度较高的医院来说是很排斥的。<br>针对每家医院个性化的功能，现在普遍采取的是通过系统参数或者配置表的形式进行功能的切换，这种方式一定程度上可以解决个性化改造较多的问题，但是随着上线的医院项目越来越多，参数越加越多，现在我们系统已经有七八百的参数，随着项目以及人员的变动，某些参数的功能甚至都没有人清楚影响的具体功能(这主要也是因为我们相关文档没有完善的原因)，而且代码耦合度较深，各种判断穿插交错，给后续的开发人员带来很大的不便。<br>产品化开发带来的另一个问题就是发布问题，现在绝大多数HIS项目是部署在医院服务器上，所有医院项目都在一条代码分支上，每次发布都会将其他项目的改动一起发布上去，在改动量比较大的情况下很难不造成影响，系统的稳定性很难保证。<br>对于公司而言，对技术的要求就是迅速交付，对于项目来说，最重要的是系统保持稳定并且能对新增的需求快速响应。在不能保证需求高度统一的情况下，新上线的项目往往是采取项目化的开发方式，为的就是保证已上线项目的稳定性。</p><h1 id="产品化开发的一些思路"><a href="#产品化开发的一些思路" class="headerlink" title="产品化开发的一些思路"></a>产品化开发的一些思路</h1><p>产品化开发现在存在的主要是稳定性和便捷性的问题，主要是担心不同项目之间相互影响而且项目愈发复杂不便于开发以及项目发布。</p><h2 id="解决接口繁杂问题"><a href="#解决接口繁杂问题" class="headerlink" title="解决接口繁杂问题"></a>解决接口繁杂问题</h2><p>影响产品化的一个很大的因素是接口不统一，而且接口代码掺杂在HIS业务代码中，耦合行高，不便于代码的维护以及拓展。在HIS中预设接口相关的事件，相应的操作触发时，调用相应的类处理，后台合理的利用设计模式可以实现业务系统和第三方系统的解耦，可以做到根据接口的不同将代码分离开，这样的话每个项目只需要关注自己的接口实现类，将不同接口方式的实现分离开，保证接口的更改不会影响其他项目的稳定，之前设计过医保的接口规范，可参考<a href="https://wrxiang.github.io/2019/09/09/HIS%E5%8C%BB%E4%BF%9D%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">HIS医保接口规范</a><br>接口的对接比较好处理，根据接口所对应的业务设计接口规范，保证不同的接口方式对应不同的实现类，符合多态开闭原则。</p><h2 id="个性化需求处理"><a href="#个性化需求处理" class="headerlink" title="个性化需求处理"></a>个性化需求处理</h2><p>和接口不同，接口主要是数据传输，而一些个性化的需求往往体现在业务流程的改变以及前台界面的变化，业务流的改变可以和接口做类似的处理，让系统能够覆盖更多的业务场景，而界面可以根据业务模型映射成前台界面，这样的话一旦有界面的变化直接更改业务模型就可以，不涉及代码的更改，方便复用和变量的隔离，此外更重要的是模块化组件式编程，业务模型更细的颗粒度。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>相对于做项目，产品化对于设计开发人员要求更高，需要全局考虑，而且不经过多个不同类型项目的验证，也不能够说明产品化就是没有问题的，并且随着项目越来越多，重构的模块可能也会越来越多，势必耗费更多的时间以及人力，并且还要有完善的测试环节，否则很难保证系统稳定，而项目化的开发方式就显的简单一些，只需要关注当前项目的功能即可，有利于项目需求的快速响应并且有利于保证系统稳定性，测试环节也相对简单，而这也是很多厂商选择项目化开发方式的原因，甚至出现一个标准版，十几个分支项目的情况。<br>最初的时候感觉做项目没有意思，每个项目都是功能的堆叠，对于技术没有太大的提升，不过慢慢发现不断接触不同的业务场景以及医疗政策，对于系统的业务模型以及代码设计上有非常重要的作用，没有足够的项目经验，去谈HIS系统的产品化以及代码设计就是空中楼阁，而且在HIS如此复杂的业务场景下，对代码设计就有比较高的要求，各种设计模式都能够找到应用场景。<br>产品化的方式费时费力，而且由于医院HIS项目的复杂性以及特殊性来说，很少会有厂商采用这种方式进行，毕竟项目化的开发方式更易于该项目需求的快速响应以及维护。从传统软件的实施角度来说，项目化短期内更利于项目的快速交付验收。无论做项目还是产品，对于开发以及设计人员来说，在做需求时能够多思考，完成兼容性更强，移植性更高，业务场景覆盖更广的HIS系统，也由衷的希望云HIS的出现从另一个层面上打破现在的业务状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; title=&quot;现状&quot;&gt;&lt;/a&gt;现状&lt;/h1&gt;&lt;p&gt;HIS系统即医院信息系统(全称为Hospital Information System) ，而HIS厂商对于系统的开发和交付大致是两种模式，项目化开发以及产品化开发。项目化开发模式下代码单独拉出一个分支，该分支对应着该医院项目，医院所有的需求以及bug均在该分支上修改。另一种是类似saas系统的开发模式，也就是常说的产品化开发方式，无论项目有多少，代码是一套，标准化的流程，功能可配置。&lt;br&gt;显而易见产品化开发方式，对于软件开发以及交付来说有极大的优势，然而在软件交付过程中，产品化方式却存在着诸多的问题，困扰着开发以及交付人员。问题主要在于医院对于HIS系统个性化需求多，而且差异比较大。&lt;br&gt;
    
    </summary>
    
      <category term="程序员日常思考" scheme="http://wrxiang.top/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%97%A5%E5%B8%B8%E6%80%9D%E8%80%83/"/>
    
    
      <category term="HIS，产品化" scheme="http://wrxiang.top/tags/HIS%EF%BC%8C%E4%BA%A7%E5%93%81%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>linux主机通过ssh登录windows服务器启动tomcat所踩的坑</title>
    <link href="http://wrxiang.top/2020/01/18/linux%E4%B8%BB%E6%9C%BA%E9%80%9A%E8%BF%87ssh%E7%99%BB%E5%BD%95windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8tomcat%E6%89%80%E8%B8%A9%E7%9A%84%E5%9D%91/"/>
    <id>http://wrxiang.top/2020/01/18/linux主机通过ssh登录windows服务器启动tomcat所踩的坑/</id>
    <published>2020-01-18T23:54:30.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情景描述"><a href="#情景描述" class="headerlink" title="情景描述"></a>情景描述</h2><p>公司的Jenkins服务安装在linux系统上，但是很多应用服务器都是windows系统，那么在jenkisn上编译生成的war包如何传输到windows服务器上并且进行tomcat服务的重启呢？相对于linux的应用服务器，使用jenkins在windows上做自动发布还是遇到了一些不好解决的问题，windows系统在运维上还是有许多不便的（默默吐槽一句）。<br><a id="more"></a></p><h2 id="发布步骤"><a href="#发布步骤" class="headerlink" title="发布步骤"></a>发布步骤</h2><p>类比linux的应用服务器，首选是通过ssh远程登录的方式进行，这样的话jenkins的配置都不需要怎么更改，简单的发布步骤如下：</p><ol><li>jenkins中使用MAVEN编译打包，生成所需的war包</li><li>scp将war包传输到应用服务器</li><li>ssh远程执行应用服务器的部署重启脚本</li><li>发布完成</li></ol><p>windows默认是不支持ssh服务的，这里我采用的是微软官方的解决方案OpenSSH，安装步骤可以参考：<a href="https://wrxiang.github.io/2020/01/18/Windows%E5%AE%89%E8%A3%85OpenSSH%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener">Windows安装OpenSSH服务</a></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>jenkisn远程调用应用服务器上的部署脚本后，tomcat服务没有启动，但是在应用服务器上手动运行脚本是能够完成项目的部署以及重启的，通过调试发现远程调用bat脚本确实将tomcat服务停掉并进行了重启，但是随着ssh连接的断开，通过ssh启动的进程也一同销毁。<br>通过搜索问题发现，在ssh到windows的情况下，只要ssh退出，ssh启动的任务都会被kill掉。万事具备，只欠重启，这步实现不了，那之前的工作和没有做一样，没办法，只能找各种方案进行尝试。</p><h2 id="尝试过的方案"><a href="#尝试过的方案" class="headerlink" title="尝试过的方案"></a>尝试过的方案</h2><h3 id="防止jenkins杀掉进程"><a href="#防止jenkins杀掉进程" class="headerlink" title="防止jenkins杀掉进程"></a>防止jenkins杀掉进程</h3><p>执行脚本前增加 <code>export BUILD_ID=notkillme</code>，告诉jenkins任务结束后不要杀掉通过它启动的进程。jenkins和tomcat在同一台服务器上可以实现，但这是ssh断开的服务和jenkins无关。</p><h3 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h3><p>在windows 上安装linux的shell环境，我是通过安装一个git，然后将git的cmd和bin配置到环境变量path中来实现的。<br>shell中可以使用nohup命令启动tomcat，nohup 命令会忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行的程序不会注销，仍会运行。<br>但是ssh远程启动脚本的情况下，ssh连接断开，通过nohup启动的服务也会注销<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./startup.sh &amp;</span><br></pre></td></tr></table></figure></p><h3 id="将tomcat注册为服务"><a href="#将tomcat注册为服务" class="headerlink" title="将tomcat注册为服务"></a>将tomcat注册为服务</h3><p>通过将tomcat注册成服务，在bat脚本中通过服务的方式启动，在ssh断开之后服务能够正常运行。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止tomcat服务</span></span><br><span class="line">net <span class="literal">stop</span> tomcat7</span><br><span class="line"><span class="comment"># 启动tomcat服务</span></span><br><span class="line">net <span class="literal">start</span> tomcat7</span><br></pre></td></tr></table></figure></p><p>通过这种方式，能够保证tomcat在ssh断开后仍能够运行，但是实践中发现我们项目不止要使用tomcat,还依赖一些中间件，例如zookeeper，MQ等，他们在windows下不能被注册为服务（zookeeper虽然可以注册为服务，但是都不建议在生产环境运行），此种方式使用场景有限制。</p><h3 id="调用windows上的执行计划"><a href="#调用windows上的执行计划" class="headerlink" title="调用windows上的执行计划"></a>调用windows上的执行计划</h3><p>在windows上创建一个执行计划，执行计划调用部署重启的脚本，ssh远程启动这个执行计划，通过这种方式触发的脚本能够保证在ssh断开后，服务一直可以运行，和手动执行脚本没有区别，此方式实际项目中使用。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动名为DEPLOY的执行计划</span></span><br><span class="line">schtasks /<span class="keyword">Run</span><span class="bash"> /TN <span class="string">"DEPLOY"</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;情景描述&quot;&gt;&lt;a href=&quot;#情景描述&quot; class=&quot;headerlink&quot; title=&quot;情景描述&quot;&gt;&lt;/a&gt;情景描述&lt;/h2&gt;&lt;p&gt;公司的Jenkins服务安装在linux系统上，但是很多应用服务器都是windows系统，那么在jenkisn上编译生成的war包如何传输到windows服务器上并且进行tomcat服务的重启呢？相对于linux的应用服务器，使用jenkins在windows上做自动发布还是遇到了一些不好解决的问题，windows系统在运维上还是有许多不便的（默默吐槽一句）。&lt;br&gt;
    
    </summary>
    
      <category term="持续集成" scheme="http://wrxiang.top/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="jenkins" scheme="http://wrxiang.top/tags/jenkins/"/>
    
      <category term="ssh" scheme="http://wrxiang.top/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Windows安装OpenSSH服务</title>
    <link href="http://wrxiang.top/2020/01/18/Windows%E5%AE%89%E8%A3%85OpenSSH%E6%9C%8D%E5%8A%A1/"/>
    <id>http://wrxiang.top/2020/01/18/Windows安装OpenSSH服务/</id>
    <published>2020-01-18T20:38:30.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做Jenkins的持续集成，公司的应用服务器大多是Windows系统，平时的运维主要是靠远程桌面的方式，为了使用Jenkins自动部署，需要在windows系统上安装SSH的服务，这里介绍微软官方的解决方案，详细介绍可以参考官网wiki。<br>基于PowerShell的OpenSSH: <a href="https://github.com/PowerShell/Win32-OpenSSH/releases" target="_blank" rel="noopener">https://github.com/PowerShell/Win32-OpenSSH/releases</a><br><a id="more"></a></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>进入链接下载最新的OpenSSH-Win64.zip，解压至 <code>C:\Program Files\OpenSSH</code></li><li><p>打开cmd，进入 <code>C:\Program Files\OpenSSH</code>安装目录，执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1</span><br></pre></td></tr></table></figure></li><li><p>设置服务自动启动并启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc config sshd start= auto</span><br><span class="line">net start sshd</span><br></pre></td></tr></table></figure></li><li><p>修复主机端的文件权限,进入 <code>C:\Program Files\OpenSSH</code>，右键 FixHostFilePermissions.ps1【使用PowerShell运行】，命令行提示全选是</p></li></ol><p>执行这一步时有可能命令窗口一闪而过，由于系统禁止执行脚本的原因，打开Shell窗口，执行命令 <code>set-executionpolicy remotesigned</code>修改策略即可</p><p>至此ssh服务安装完成，默认端口是22，若服务器上开启防火墙需要设置对该端口的允许</p><h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p>进入 <code>C:\ProgramData\ssh</code> 目录下的sshd_config文件是ssh的配置文件，常用配置如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">Port 22</span><br><span class="line"><span class="comment"># 设置ssh在接收登录请求之前是否检查用户家目录和rhosts文件的权限和所有权</span></span><br><span class="line">StrictModes no</span><br><span class="line"><span class="comment"># 密钥访问</span></span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line"><span class="comment"># 密码访问</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"><span class="comment"># 空密码访问</span></span><br><span class="line">PermitEmptyPasswords no</span><br><span class="line"><span class="comment"># administrator用户组的用户默认公钥文件路径</span></span><br><span class="line">AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys</span><br></pre></td></tr></table></figure></p><p>进入<code>C:\ProgramData\ssh\</code>目录，创建administrators_authorized_keys文件，在该目录下打开cmd窗口，执行以下命令设置权限<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">icacls administrators_authorized_keys /<span class="string">inheritance:</span>r</span><br><span class="line">icacls administrators_authorized_keys /grant <span class="string">SYSTEM:</span>(F)</span><br><span class="line">icacls administrators_authorized_keys /grant BUILTIN\<span class="string">Administrators:</span>(F)</span><br></pre></td></tr></table></figure></p><p>cmd中重启sshd服务就可以使用密钥登录SSH服务<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> stop sshd</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> sshd</span><br></pre></td></tr></table></figure></p><h2 id="踩入的坑"><a href="#踩入的坑" class="headerlink" title="踩入的坑"></a>踩入的坑</h2><ol><li>网上很多教程介绍需要在 <code>C:\Users\账户名\.ssh</code>目录创建 <code>authorized_keys</code>公钥文件，后来发现7.9版本之后，公钥文件默认路径是 <code>C:\ProgramData\ssh\administrators_authorized_keys</code>并且需要设置权限，设置权限命令上文已有说明</li><li>Windows Service2012R2即使配置了公钥，连接时依然显示没有注册公钥，官方判断可能是权限问题 <a href="https://github.com/PowerShell/Win32-OpenSSH/wiki/OpenSSH-utility-scripts-to-fix-file-permissions" target="_blank" rel="noopener">Fix SSH file permissions</a>，解决方法：进入安装目录，右键 FixHostFilePermissions.ps1【使用PowerShell运行】，命令行提示全选是，重启sshd服务后密钥连接正常</li><li>配置密钥登录后仍需要输入密码，SSH默认不希望home目录和~/.ssh目录对组有写权限，修改配置文件中<code>StrictModes no</code>，不让 sshd 去检查用户家目录或相关档案的权限数据，这里我们粗暴的设置为不检查权限就好，或者设置客户端的权限，若客户端是linux可参考以下命令<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod g-w <span class="regexp">/home/</span>wjw </span><br><span class="line">chmod <span class="number">700</span> <span class="regexp">/home/</span>wjw/.ssh</span><br><span class="line">chmod <span class="number">600</span> <span class="regexp">/home/</span>wjw<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做Jenkins的持续集成，公司的应用服务器大多是Windows系统，平时的运维主要是靠远程桌面的方式，为了使用Jenkins自动部署，需要在windows系统上安装SSH的服务，这里介绍微软官方的解决方案，详细介绍可以参考官网wiki。&lt;br&gt;基于PowerShell的OpenSSH: &lt;a href=&quot;https://github.com/PowerShell/Win32-OpenSSH/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/PowerShell/Win32-OpenSSH/releases&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="持续集成" scheme="http://wrxiang.top/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="OpenSSH" scheme="http://wrxiang.top/tags/OpenSSH/"/>
    
      <category term="Windows" scheme="http://wrxiang.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Oracle去除特殊字符</title>
    <link href="http://wrxiang.top/2019/12/13/Oracle%E5%8E%BB%E9%99%A4%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/"/>
    <id>http://wrxiang.top/2019/12/13/Oracle去除特殊字符/</id>
    <published>2019-12-13T15:38:22.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>在Oracle数据库中，有时字段中会存入一些特殊字符（设计不当或者程序BUG），例如制表符、换行符以及回车符等，如果包含特殊字符是看不出来的，但是在进行字段关联的时候就会查不出数据。<br>特殊字符ASCII码定义：<br><blockquote><p>制表符 chr(9)<br>换行符 chr(10)<br>回车符 chr(13)</p></blockquote></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> <span class="keyword">set</span> <span class="keyword">field</span>=<span class="keyword">replace</span>(<span class="keyword">field</span>,<span class="keyword">chr</span>(<span class="number">9</span>), <span class="string">''</span>) <span class="keyword">where</span> <span class="keyword">instr</span>(<span class="keyword">field</span>, <span class="keyword">chr</span>(<span class="number">9</span>)) &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p>其他特殊字符也可以使用ascii函数查出ASCII码然后进行替换<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ascii</span>(<span class="string">'?'</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Oracle数据库中，有时字段中会存入一些特殊字符（设计不当或者程序BUG），例如制表符、换行符以及回车符等，如果包含特殊字符是看不出来的，但是在进行字段关联的时候就会查不出数据。&lt;br&gt;特殊字符ASCII码定义：&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;制表符 chr(9)
      
    
    </summary>
    
      <category term="Oracle" scheme="http://wrxiang.top/categories/Oracle/"/>
    
    
      <category term="SQL" scheme="http://wrxiang.top/tags/SQL/"/>
    
      <category term="特殊字符" scheme="http://wrxiang.top/tags/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>PowerDesigner 逆向工程</title>
    <link href="http://wrxiang.top/2019/12/13/PowerDesigner%20%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://wrxiang.top/2019/12/13/PowerDesigner 逆向工程/</id>
    <published>2019-12-13T14:01:19.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>PowerDesigner：16.5.0.3982<br>数据库：Oracle 11g</p><p>PowerDesigner使用反向工程功能连接Oracle数据库自动生成模型以及过程中出现的问题<br><a id="more"></a></p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>首先打开PowerDesigner，依次点击 <span id="inline-blue">文件</span> –&gt;  <span id="inline-blue">反向工程</span> –&gt; <span id="inline-blue">Database…</span> ，如下图所示：<br><img src="https://i.loli.net/2019/12/13/KC6ePAoFTSVQrxE.png" alt="1576217565_1_.png"><br>然后弹出以下界面，模型名称随便取就好，DBMS选择ORACLE_Version_11g，然后点击确定<br><img src="https://i.loli.net/2019/12/13/WuxwMGQohPm52JT.png" alt="20191213141601.png"><br>在弹出的界面中选择使用数据源，然后点击旁边的圆柱图标配置连接<br><img src="https://i.loli.net/2019/12/13/SWzAlLcNyXnjgE3.png" alt="1576217565.png"><br>在弹出的界面中选择 ‘Connections profile’，然后点击<span id="inline-blue">Configure…</span>按钮<br><img src="https://i.loli.net/2019/12/13/paSnWhyiQ96Tf4m.png" alt="1576217565.png"><br>在弹出的界面中选择第三个页签 Connetion Profiles，然后点击添加数据源按钮（快捷键 Ctrl + N）<br><img src="https://i.loli.net/2019/12/13/SfiQ6tchBEgmHWy.png" alt="1576217565.png"><br>然后在弹出的界面中填写建立数据库连接的相关信息，这里我们选择JDBC的连接方式，主要是因为ODBC的连接方式需要安装Oracle完整版客户端，我电脑上使用的是绿色版的客户端，不想再安装了，JDBC方式需要使用Oracle驱动的jar包，需要提前准备好<br><img src="https://i.loli.net/2019/12/13/wZ2sVFKlH9vtgSx.png" alt="1576217565.png"><br>配置完成点击 <span id="inline-blue">Test Connection</span> 按钮输入用户名以及密码可以测试连接是否成功。<br>测试连接时有可能会有报错，PowerDesigner控制台打印出 <code>Could not Initialize JavaVM!</code>，解决方案如下：</p><ol><li>检查安装的JDK是否时32位，需要使用32位JDK，64位报错不能使用，因为PowerDesigner是32位程序</li><li>设置JAVA_HOME环境变量 set JAVA_HOME=C:\Program Files (x86)\Java\jdk1.8.0_25;</li><li>设置CLASSPATH环境变量 set CLASSPATH=.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</li><li>将JAVA_HOME设置进系统环境变量中 set path=JAVA_HOME\bin;</li><li>PowerDesigner软件中，工具–&gt;常规选项–&gt;variables 中设置JAR,JAVA,JAVAC,JAVADOC路径，他们的路径就是安装的32位的jdk里面的bin目录下的 对应名称的可执行文件</li></ol><p>上述设置完成后就可以连接成功了，然后点击确定回到数据库连接界面，选择配置好的Oracle数据连接，输入用户名以及密码，点击<span id="inline-blue">connect</span>连接数据库<br><img src="https://i.loli.net/2019/12/13/IgEOzxSPKpq5aji.png" alt="1576217565.png"><br><img src="https://i.loli.net/2019/12/13/ue2jsLR7pqYmJrf.png" alt="1576217565.png"><br>然后在弹出的数据库反向引擎界面选择需要的用户、表或者视图等，点击确定会自动生成模型。<br><img src="https://i.loli.net/2019/12/13/9yp6OvIna3KMkeN.png" alt="1576217565.png"><br>默认生成的模型CODE和NAME都是表字段，没有将数据库字段的注释自动生成出来，需要进行以下操作：<br>点击 <span id="inline-blue">工具</span>–&gt; <span id="inline-blue">Execute Commonds</span> –&gt; <span id="inline-blue">Edit/Run Script…</span>，然后将以下内容输入弹出的窗口中，然后点击Run按钮就会将数据库注释添加到模型的Name上。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Option</span>   <span class="keyword">Explicit</span> </span><br><span class="line">ValidationMode   =   <span class="literal">True</span> </span><br><span class="line">InteractiveMode   =   im_Batch</span><br><span class="line"> </span><br><span class="line"><span class="keyword">Dim</span>   mdl   <span class="comment">'   the   current   model</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">'   get   the   current   active   model </span></span><br><span class="line"><span class="keyword">Set</span>   mdl   =   ActiveModel </span><br><span class="line"><span class="keyword">If</span>   (mdl   <span class="keyword">Is</span>   <span class="literal">Nothing</span>)   <span class="keyword">Then</span> </span><br><span class="line">  MsgBox   <span class="string">"There   is   no   current   Model "</span> </span><br><span class="line"><span class="keyword">ElseIf</span>   <span class="keyword">Not</span>   mdl.IsKindOf(PdPDM.cls_Model)   <span class="keyword">Then</span> </span><br><span class="line">  MsgBox   <span class="string">"The   current   model   is   not   an   Physical   Data   model. "</span> </span><br><span class="line"><span class="keyword">Else</span> </span><br><span class="line">  ProcessFolder   mdl </span><br><span class="line"><span class="keyword">End</span>   <span class="keyword">If</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">Private</span>   <span class="keyword">sub</span>   ProcessFolder(folder) </span><br><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line">  <span class="keyword">Dim</span>   Tab   <span class="comment">'running table </span></span><br><span class="line">  <span class="keyword">for</span>   <span class="keyword">each</span>   Tab   <span class="keyword">in</span>   folder.tables </span><br><span class="line"><span class="keyword">if</span>   <span class="keyword">not</span>   tab.isShortcut   <span class="keyword">then</span> </span><br><span class="line">  tab.name   =   tab.comment</span><br><span class="line">  <span class="keyword">Dim</span>   col   <span class="comment">'   running   column </span></span><br><span class="line">  <span class="keyword">for</span>   <span class="keyword">each</span>   col   <span class="keyword">in</span>   tab.columns </span><br><span class="line">  <span class="keyword">if</span> col.comment=<span class="string">""</span> <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">col.name=   col.comment </span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">  <span class="keyword">next</span> </span><br><span class="line"><span class="keyword">end</span>   <span class="keyword">if</span> </span><br><span class="line">  <span class="keyword">next</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">Dim</span>   view   <span class="comment">'running   view </span></span><br><span class="line">  <span class="keyword">for</span>   <span class="keyword">each</span>   view   <span class="keyword">in</span>   folder.Views </span><br><span class="line"><span class="keyword">if</span>   <span class="keyword">not</span>   view.isShortcut   <span class="keyword">then</span> </span><br><span class="line">  view.name   =   view.comment </span><br><span class="line"><span class="keyword">end</span>   <span class="keyword">if</span> </span><br><span class="line">  <span class="keyword">next</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">'   go   into   the   sub-packages </span></span><br><span class="line">  <span class="keyword">Dim</span>   f   <span class="comment">'   running   folder </span></span><br><span class="line">  <span class="keyword">For</span>   <span class="keyword">Each</span>   f   <span class="keyword">In</span>   folder.Packages </span><br><span class="line"><span class="keyword">if</span>   <span class="keyword">not</span>   f.IsShortcut   <span class="keyword">then</span> </span><br><span class="line">  ProcessFolder   f </span><br><span class="line"><span class="keyword">end</span>   <span class="keyword">if</span> </span><br><span class="line">  <span class="keyword">Next</span> </span><br><span class="line"><span class="keyword">end</span>   <span class="keyword">sub</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PowerDesigner：16.5.0.3982&lt;br&gt;数据库：Oracle 11g&lt;/p&gt;
&lt;p&gt;PowerDesigner使用反向工程功能连接Oracle数据库自动生成模型以及过程中出现的问题&lt;br&gt;
    
    </summary>
    
      <category term="PowerDesigner" scheme="http://wrxiang.top/categories/PowerDesigner/"/>
    
    
      <category term="PowerDesigner" scheme="http://wrxiang.top/tags/PowerDesigner/"/>
    
      <category term="逆向工程" scheme="http://wrxiang.top/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring中事件处理</title>
    <link href="http://wrxiang.top/2019/10/30/Spring%E4%B8%AD%E4%BA%8B%E4%BB%B6/"/>
    <id>http://wrxiang.top/2019/10/30/Spring中事件/</id>
    <published>2019-10-30T09:51:23.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>Spring的核心是<strong>ApplicationContext</strong>，它负责管理beans的完整生命周期，当加载beans时，ApplicationContext发布某些类型的事件。例如，当上下文启动时，ContexttStartedEvent发布，当上下文停止时，ContextStoppedEvent发布。<br>通过ApplicationEvent类和ApplicationListener接口来提供在ApplicationContext中处理事件，如果一个bean实现ApplicationListener,那么每次ApplicationEvent被发布到ApplicationContext上，这个bean会被通知。<br><a id="more"></a><br>Spring提供了以下的标准事件：</p><table><thead><tr><th>内置事件</th><th>描述</th></tr></thead><tbody><tr><td>ContextRefreshedEvent</td><td>ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext 接口中使用 refresh() 方法来发生</td></tr><tr><td>ContextStartedEvent</td><td>当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序</td></tr><tr><td>ContextStoppedEvent</td><td>当使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作</td></tr><tr><td>ContextClosedEvent</td><td>当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启</td></tr><tr><td>RequestHandledEvent</td><td>这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务</td></tr></tbody></table><p>由于Spring的事件处理是单线程的，所以如果一个事件被发布，直至并且除非所有接收者得到该消息，该进程被阻塞并且流程将不会继续，因此，如果事件处理被使用，在涉及应用程序时应注意。</p><h2 id="监听上下文事件"><a href="#监听上下文事件" class="headerlink" title="监听上下文事件"></a>监听上下文事件</h2><p>为了监听上下文事件，一个bean应该实现只有一个方法onApplicationEvent() 的 ApplicationListener 接口。因此，下面提供一个例子来看看事件是如何传播的，以及如何可以用代码来执行基于某些事件所需的任务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Your Message : "</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是上下文启动事件处理类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextStartedEvent;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CStartEventHandler</span> </span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextStartedEvent</span>&gt;</span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextStartedEvent event)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"ContextStartedEvent Received"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是上下文停止事件处理类：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextStoppedEvent;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CStopEventHandler</span> </span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextStoppedEvent</span>&gt;</span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextStoppedEvent event)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"ContextStoppedEvent Received"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">下面试配置文件：</span><br><span class="line">```xml</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=<span class="string">"helloWorld"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tutorialspoint.HelloWorld"</span>&gt;</span><br><span class="line">      &lt;property name=<span class="string">"message"</span> value=<span class="string">"Hello World!"</span>/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=<span class="string">"cStartEventHandler"</span> </span><br><span class="line">         <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tutorialspoint.CStartEventHandler"</span>/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=<span class="string">"cStopEventHandler"</span> </span><br><span class="line">         <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tutorialspoint.CStopEventHandler"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">下面在main方法中进行测试：</span><br><span class="line">```java</span><br><span class="line">package com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> &#123;</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">      ConfigurableApplicationContext context = </span><br><span class="line">      <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Let us raise a start event.</span></span><br><span class="line">      context.start();</span><br><span class="line"></span><br><span class="line">      HelloWorld obj = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</span><br><span class="line"></span><br><span class="line">      obj.getMessage();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Let us raise a stop event.</span></span><br><span class="line">      context.<span class="built_in">stop</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以运行该应用程序,如果应用程序一切都正常，将输出以下消息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ContextStartedEvent Received</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">ContextStoppedEvent Received</span><br></pre></td></tr></table></figure></p><h2 id="自定义事件处理"><a href="#自定义事件处理" class="headerlink" title="自定义事件处理"></a>自定义事件处理</h2><p>程序中往往需要自定义一些事件进行业务处理，Spring中提供了良好的事件处理机制，通过继承ApplicationEvent可以很好的实现自定义事件，下面是自定义事件的流程：</p><ol><li>通过继承 <code>ApplicationEvent</code> 创建一个事件类 <code>CustomEvent</code> ,这个类必须定义一个默认的构造函数，他应该从ApplicationEvent类中继承的构造函数。</li><li>通过实现 <code>ApplicationEventPublisherAware</code> 接口创建一个事件发布者 <code>EventClassPublisher</code> ，并且还需要在XML中声明这个类作为一个bean。</li><li>通过实现 <code>ApplicationListener</code> 接口创建一个事件处理者 <code>EventClassHandler</code> ，实现自定义事件的 <code>onApplicationEvent</code> 方法，并且还需要在XML中声明这个类作为一个bean。</li></ol><p>这个是 CustomEvent.java 文件的内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CustomEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(source);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"My Custom Event"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是 CustomEventPublisher.java 文件的内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisherAware;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEventPublisher</span> </span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> setApplicationEventPublisher</span><br><span class="line">              (ApplicationEventPublisher publisher)&#123;</span><br><span class="line">      <span class="keyword">this</span>.publisher = publisher;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      CustomEvent ce = <span class="keyword">new</span> CustomEvent(<span class="keyword">this</span>);</span><br><span class="line">      publisher.publishEvent(ce);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是 CustomEventHandler.java 文件的内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEventHandler</span> </span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">CustomEvent</span>&gt;</span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(CustomEvent event)</span> </span>&#123;</span><br><span class="line">      System.out.println(event.toString());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是配置文件 Beans.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customEventHandler"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.tutorialspoint.CustomEventHandler"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customEventPublisher"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.tutorialspoint.CustomEventPublisher"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>下面在main方法中进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ConfigurableApplicationContext context = </span><br><span class="line">      <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Beans.xml"</span>);    </span><br><span class="line">      CustomEventPublisher cvp = </span><br><span class="line">      (CustomEventPublisher) context.getBean(<span class="string">"customEventPublisher"</span>);</span><br><span class="line">      cvp.publish();  </span><br><span class="line">      cvp.publish();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行该应用程序。如果应用程序一切都正常，将输出以下信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">My Custom Event</span><br><span class="line">My Custom Event</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring的核心是&lt;strong&gt;ApplicationContext&lt;/strong&gt;，它负责管理beans的完整生命周期，当加载beans时，ApplicationContext发布某些类型的事件。例如，当上下文启动时，ContexttStartedEvent发布，当上下文停止时，ContextStoppedEvent发布。&lt;br&gt;通过ApplicationEvent类和ApplicationListener接口来提供在ApplicationContext中处理事件，如果一个bean实现ApplicationListener,那么每次ApplicationEvent被发布到ApplicationContext上，这个bean会被通知。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://wrxiang.top/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://wrxiang.top/tags/Spring/"/>
    
      <category term="事件处理" scheme="http://wrxiang.top/tags/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring基于注解的配置</title>
    <link href="http://wrxiang.top/2019/10/29/Spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://wrxiang.top/2019/10/29/Spring基于注解的配置/</id>
    <published>2019-10-29T16:58:55.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>从Spring 2.5开始就可以使用<strong>注解</strong>来配置依赖注入，而不是采用XML描述bean直接的依赖关系，我们可以使用相关的注解将bean的配置移动到类本身。<br>Spring容器中在XML注入前进行注解注入，因此注解连线的配置将会被XML配置重写，两种方式同时使用Spring容器以XML方式为准。<br><a id="more"></a><br>默认注解配置功能在Spring中不打开，因此在使用注解连线前需要在Spring配置文件中启用它，可以参考以下配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>一旦开启注解配置后，就可以使用注解连线bean之间的关系，以下是Spring中常用的几个注解</p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Required</td><td>注解应用于 bean 属性的 setter 方法</td></tr><tr><td>@Autowired</td><td>注解可以应用到 bean 属性的 setter 方法，非 setter 方法，构造函数和属性</td></tr><tr><td>@Qualifier</td><td>通过指定确切的将被连线的 bean，@Autowired 和 @Qualifier 注解可以用来删除混乱</td></tr><tr><td>JSR-250 Annotations</td><td>Spring 支持 JSR-250 的基础的注解，其中包括了 @Resource，@PostConstruct 和 @PreDestroy 注解</td></tr></tbody></table><h2 id="Required-注解"><a href="#Required-注解" class="headerlink" title="@Required 注解"></a>@Required 注解</h2><p>@Required注解应用于bean的setter方法，它表明受影响bean的属性在配置时必须放在XML配置文件中，也就是说必须注入该属性，否则容器会抛出一个<code>BeanInitializationException</code>异常。</p><h2 id="Autowired-注解"><a href="#Autowired-注解" class="headerlink" title="@Autowired 注解"></a>@Autowired 注解</h2><p>@Autowired注解可以应用到 bean 属性的 setter 方法，非 setter 方法，构造函数和属性，它为完成自动连接提供了更多细微的控制。</p><h3 id="setter方法中的-Autowired"><a href="#setter方法中的-Autowired" class="headerlink" title="setter方法中的 @Autowired"></a>setter方法中的 @Autowired</h3><p>@Autowired注解放在setter方法上，可以去除XML中对于该方法对应属性的注入，当Spring遇到一个在setter方法中使用的@Autowired，它会在方法中试图执行byType自动连接</p><h3 id="属性中的-Autowired"><a href="#属性中的-Autowired" class="headerlink" title="属性中的 @Autowired"></a>属性中的 @Autowired</h3><p>可以在属性中使用 @Autowired 注释来除去 setter 方法，当时使用 为自动连接属性传递的时候，Spring 会将这些传递过来的值或者引用自动分配给那些属性。</p><h3 id="构造函数中的-Autowired"><a href="#构造函数中的-Autowired" class="headerlink" title="构造函数中的 @Autowired"></a>构造函数中的 @Autowired</h3><p>可以在构造函数中使用 @Autowired。一个构造函数 @Autowired 说明当创建 bean 时，即使在 XML 文件中没有使用 元素配置 bean ，构造函数也会被自动连接。</p><h3 id="Autowired-的（required-false）选项"><a href="#Autowired-的（required-false）选项" class="headerlink" title="Autowired 的（required=false）选项"></a>Autowired 的（required=false）选项</h3><p>默认情况下，@Autowired 注释意味着依赖是必须的，它类似于 @Required 注释，然而，你可以使用 @Autowired 的 （required=false） 选项关闭默认行为。</p><h2 id="Qualifier-注解"><a href="#Qualifier-注解" class="headerlink" title="@Qualifier 注解"></a>@Qualifier 注解</h2><p>可能会有这样一种情况，当你创建多个具有相同类型的 bean 时，并且想要用一个属性只为它们其中的一个进行装配，在这种情况下，你可以使用 @Qualifier 注释和 @Autowired 注释通过指定哪一个真正的 bean 将会被装配来消除混乱。下面显示的是使用 @Qualifier 注释的一个示例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">   &#125;   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Profile</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier</span>(<span class="string">"student1"</span>)</span><br><span class="line">   <span class="keyword">private</span> Student student;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Profile</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Profile constructor."</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Age : "</span> + student.getAge() );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Name : "</span> + student.getName() );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for profile bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"profile"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.Profile"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student1 bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student1"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.Student"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>  <span class="attr">value</span>=<span class="string">"Zara"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>  <span class="attr">value</span>=<span class="string">"11"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student2 bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student2"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.Student"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>  <span class="attr">value</span>=<span class="string">"Nuha"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>  <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSR-250-注释"><a href="#JSR-250-注释" class="headerlink" title="JSR-250 注释"></a>JSR-250 注释</h2><p>Spring还使用基于 JSR-250 注释，它包括 <code>@PostConstruct</code>， <code>@PreDestroy</code>和 <code>@Resource</code> 注释。</p><h3 id="PostConstruct-和-PreDestroy-注解"><a href="#PostConstruct-和-PreDestroy-注解" class="headerlink" title="@PostConstruct 和 @PreDestroy 注解"></a>@PostConstruct 和 @PreDestroy 注解</h3><p>为了定义一个 bean 的安装和卸载，我们使用 init-method 和/或 destroy-method 参数简单的声明一下 。init-method 属性指定了一个方法，该方法在 bean 的实例化阶段会立即被调用。同样地，destroy-method 指定了一个方法，该方法只在一个 bean 从容器中删除之前被调用。<br>我们也可以使用 @PostConstruct 注释作为初始化回调函数的一个替代，@PreDestroy 注释作为销毁回调函数的一个替代。</p><h3 id="Resource-注解"><a href="#Resource-注解" class="headerlink" title="@Resource 注解"></a>@Resource 注解</h3><p>可以在字段中或者 setter 方法中使用 @Resource 注释，它和在 Java EE 5 中的运作是一样的。@Resource 注释使用一个 ‘name’ 属性，该属性以一个 bean 名称的形式被注入。你可以说，它遵循 by-name 自动连接语义。</p><h2 id="Spring基于Java的配置"><a href="#Spring基于Java的配置" class="headerlink" title="Spring基于Java的配置"></a>Spring基于Java的配置</h2><p>基于 Java 的配置选项，可以使你在不用配置 XML 的情况下编写大多数的 Spring，但是一些有帮助的基于 Java 的注解。</p><h3 id="Configuration-注解和-Bean-注解"><a href="#Configuration-注解和-Bean-注解" class="headerlink" title="@Configuration 注解和 @Bean 注解"></a>@Configuration 注解和 @Bean 注解</h3><p>带有 @Configuration 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。@Bean 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。最简单可行的 @Configuration 类如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldConfig</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Bean</span> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> HelloWorld <span class="title">helloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> HelloWorld();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码将等同于下面的 XML 配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloWorld"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里，带有 @Bean 注解的方法名称作为 bean 的 ID，它创建并返回实际的 bean。你的配置类可以声明多个 @Bean。一旦定义了配置类，你就可以使用 AnnotationConfigApplicationContext 来加载并把他们提供给 Spring 容器，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   ApplicationContext ctx = </span><br><span class="line">   <span class="keyword">new</span> AnnotationConfigApplicationContext(HelloWorldConfig<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">   HelloWorld helloWorld = ctx.getBean(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   helloWorld.setMessage(<span class="string">"Hello World!"</span>);</span><br><span class="line">   helloWorld.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你可以加载各种配置类，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   AnnotationConfigApplicationContext ctx = </span><br><span class="line">   <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">   ctx.register(AppConfig<span class="class">.<span class="keyword">class</span>, <span class="title">OtherConfig</span>.<span class="title">class</span>)</span>;</span><br><span class="line">   ctx.register(AdditionalConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   ctx.refresh();</span><br><span class="line">   MyService myService = ctx.getBean(MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   myService.doStuff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从Spring 2.5开始就可以使用&lt;strong&gt;注解&lt;/strong&gt;来配置依赖注入，而不是采用XML描述bean直接的依赖关系，我们可以使用相关的注解将bean的配置移动到类本身。&lt;br&gt;Spring容器中在XML注入前进行注解注入，因此注解连线的配置将会被XML配置重写，两种方式同时使用Spring容器以XML方式为准。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://wrxiang.top/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://wrxiang.top/tags/Spring/"/>
    
      <category term="注解" scheme="http://wrxiang.top/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Spring自动装配</title>
    <link href="http://wrxiang.top/2019/10/29/Spring%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>http://wrxiang.top/2019/10/29/Spring自动装配/</id>
    <published>2019-10-29T16:06:32.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>在定义bean时我们可以通过<code>constructor-arg</code>和<code>property</code>元素来注入所依赖的bean，Spring容器可以在不使用这两个标签的情况下自动装配相互协作的bean直接的关系，这有助于减少XML配置的数量。<br><a id="more"></a><br>在声明bean时可以使用<code>autowire</code>元素来为一个bean定义指定自动装配模式，以下是Spring容器中的装配模式:</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>no</td><td>默认设置，没有自动装配，应该使用显式的bean引用来进行bean的装配</td></tr><tr><td>byname</td><td>由属性名自动装配，Spring容器在看到XML配置中bean的自动装配属性设置为byName，然后尝试匹配，并将他的属性与配置文件中被定义为相同名称的beans的属性进行连接</td></tr><tr><td>byType</td><td>由属性数据类型自动装配，Spring容器在看到XML配置中bean的自动装配属性设置为byType，然后如果它的类型匹配配置文件中的一个确切的 bean 名称，它将尝试匹配和连接属性的类型。如果存在不止一个这样的 bean，则一个致命的异常将会被抛出</td></tr><tr><td>constructor</td><td>类似于 byType，但该类型适用于构造函数参数类型。如果在容器中没有一个构造函数参数类型的 bean，则一个致命错误将会发生</td></tr><tr><td>autodetect</td><td>Spring首先尝试通过 constructor 使用自动装配来连接，如果它不执行，Spring 尝试通过 byType 来自动装配</td></tr></tbody></table><h2 id="自动装配的局限性"><a href="#自动装配的局限性" class="headerlink" title="自动装配的局限性"></a>自动装配的局限性</h2><p>当自动装配始终在同一个项目中使用时，它的效果最好。如果通常不使用自动装配，它可能会使开发人员混淆的使用它来连接只有一个或两个 bean 定义。不过，自动装配可以显著减少需要指定的属性或构造器参数，但应该在使用它们之前考虑到自动装配的局限性和缺点。 </p><table><thead><tr><th>限制</th><th>描述</th></tr></thead><tbody><tr><td>重写的可能性</td><td>可以使用总是重写自动装配的 <code>&lt;constructor-arg&gt;</code>和 <code>&lt;property&gt;</code> 设置来指定依赖关系</td></tr><tr><td>原始数据类型</td><td>不能自动装配所谓的简单类型包括基本类型，字符串和类</td></tr><tr><td>混乱的本质</td><td>自动装配不如显式装配精确，所以如果可能的话尽可能使用显式装配</td></tr></tbody></table><h2 id="byName自动装配"><a href="#byName自动装配" class="headerlink" title="byName自动装配"></a>byName自动装配</h2><p>这种模式由属性名称指定自动装配，在XML配置文件中bean的<code>auto-write</code>属性设置为byName，Spring容器将尝试将他的属性与配置文件中定义为相同名称的bean进行匹配和连接，如果找到匹配项，它将注入这些beans，否则将抛出异常。<br>下面是在正常情况下的配置文件 Beans.xml 文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.TextEditor"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spellChecker"</span> <span class="attr">ref</span>=<span class="string">"spellChecker"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Generic Text Editor"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"spellChecker"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.SpellChecker"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你要使用自动装配 “byName”，那么 XML 配置文件将成为如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.TextEditor"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Generic Text Editor"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"spellChecker"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.SpellChecker"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="byType自动装配"><a href="#byType自动装配" class="headerlink" title="byType自动装配"></a>byType自动装配</h2><p>这种模式由属性类型指定自动装配，在XML配置文件中bean的<code>auto-write</code>属性设置为byType，Spring容器将尝试将他的属性与配置文件中定义为相同类型的bean进行匹配和连接，如果找到匹配项，它将注入这些beans，否则将抛出异常。<br>使用自动装配 “byType”，那么 XML 配置文件将成为如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.TextEditor"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Generic Text Editor"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"SpellChecker"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.SpellChecker"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="由构造函数自动装配"><a href="#由构造函数自动装配" class="headerlink" title="由构造函数自动装配"></a>由构造函数自动装配</h2><p>这种模式和byType非常类似，但是它应用于构造器参数。在 XML 配置文件中 beans 的 autowire 属性设置为 constructor。然后，它尝试把它的构造函数的参数与配置文件中 beans 名称中的一个进行匹配和连线。如果找到匹配项，它会注入这些 bean，否则，它会抛出异常。</p><p>如果你要使用自动装配 “by constructor”，那么 XML 配置文件将成为如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.TextEditor"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">"constructor"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"Generic Text Editor"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"SpellChecker"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.SpellChecker"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在定义bean时我们可以通过&lt;code&gt;constructor-arg&lt;/code&gt;和&lt;code&gt;property&lt;/code&gt;元素来注入所依赖的bean，Spring容器可以在不使用这两个标签的情况下自动装配相互协作的bean直接的关系，这有助于减少XML配置的数量。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://wrxiang.top/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://wrxiang.top/tags/Spring/"/>
    
      <category term="自动装配" scheme="http://wrxiang.top/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Spring依赖注入</title>
    <link href="http://wrxiang.top/2019/10/29/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://wrxiang.top/2019/10/29/Spring依赖注入/</id>
    <published>2019-10-29T13:29:39.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>每个基于应用程序的Java都有许多个对象，这些对象一起工作实现程序的功能，当编写一个复杂的Java应用程序时，应用程序类应该尽可能的独立于其他Java类来增加这些类重用的可能性，并且在做单元测试时，测试独立于其他类的独立性。依赖注入有助于把这些类粘合在一起，同时保证他们的独立性。<br><a id="more"></a><br>假设你有一个包含文本编辑器组件的应用程序，并且你想要提供拼写检查。标准代码看起来是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextEditor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TextEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      spellChecker = <span class="keyword">new</span> SpellChecker();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里我们所做的就是创建一个 TextEditor 和 SpellChecker 之间的依赖关系。在控制反转的场景中，我们反而会做这样的事情：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextEditor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TextEditor</span><span class="params">(SpellChecker spellChecker)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里，TextEditor 不应该担心 SpellChecker 的实现。SpellChecker 将会独立实现，并且在 TextEditor 实例化的时候将提供给 TextEditor，整个过程是由 Spring 框架的控制。<br>在这里，我们已经从 TextEditor 中删除了全面控制，并且把它保存到其他地方（即 XML 配置文件），且依赖关系（即 SpellChecker 类）通过类构造函数被注入到 TextEditor 类中。因此，控制流通过依赖注入（DI）已经“反转”，因为你已经有效地委托依赖关系到一些外部系统。<br>依赖注入的第二种方法是通过 TextEditor 类的 Setter 方法，我们将创建 SpellChecker 实例，该实例将被用于调用 setter 方法来初始化 TextEditor 的属性。</p><h2 id="基于构造函数的依赖注入"><a href="#基于构造函数的依赖注入" class="headerlink" title="基于构造函数的依赖注入"></a>基于构造函数的依赖注入</h2><p>当容器调用带有一组参数的构造函数时，基于构造函数的依赖注入就完成了，其中每个参数代表一个对其他类的依赖，我们以上面的例子实现基于构造函数的依赖注入。<br>这是 TextEditor.java 文件的内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextEditor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TextEditor</span><span class="params">(SpellChecker spellChecker)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside TextEditor constructor."</span> );</span><br><span class="line">      <span class="keyword">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spellCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是另一个依赖类文件 SpellChecker.java 的内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside SpellChecker constructor."</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkSpelling</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside checkSpelling."</span> );</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是配置文件 Beans.xml 的内容，它有基于构造函数注入的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.TextEditor"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"spellChecker"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"spellChecker"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.SpellChecker"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="构造函数解析"><a href="#构造函数解析" class="headerlink" title="构造函数解析"></a>构造函数解析</h3><p>如果构造函数存在不止一个参数，当把参数传递给构造函数时，可能会存在歧义，要解决这个问题，那么构造函数的参数在 bean 定义中的顺序就是把这些参数提供给适当的构造函数的顺序就可以了。参考下面的类以及配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">(Bar bar, Baz baz)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"x.y.Foo"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"baz"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bar"</span> <span class="attr">class</span>=<span class="string">"x.y.Bar"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"baz"</span> <span class="attr">class</span>=<span class="string">"x.y.Baz"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果在配置文件中使用type属性显式的指定了构造函数的参数的类型，容器也可以使用与简单参数类型匹配的类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> year, String name)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"2001"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"Zara"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后并且也是最好的传递构造函数参数的方式，使用index属性来显示的指定构造函数参数的索引，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"2001"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"Zara"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="基于设值函数的依赖注入"><a href="#基于设值函数的依赖注入" class="headerlink" title="基于设值函数的依赖注入"></a>基于设值函数的依赖注入</h2><p>当容器调用一个无参的构造函数或一个无参的静态 factory 方法来初始化你的 bean 后，通过容器在你的 bean 上调用设值函数，基于设值函数的 DI 就完成了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.TextEditor"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spellChecker"</span> <span class="attr">ref</span>=<span class="string">"spellChecker"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"spellChecker"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.SpellChecker"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>基于构造函数和基于设值函数的注入，唯一的区别是在基于构造函数中，我们使用的是<code>&lt;bean&gt;</code>签中的<code>&lt;constructor-arg&gt;</code>素，而基于设值函数的注入中，使用的是<code>&lt;bean&gt;</code>签中的<code>&lt;property&gt;</code>素。<br>如果需要把一个引用传递给一个对象，那么需要使用标签的 ref 属性，如果需要传递一个值，那么应该使用 value 属性。</p><h3 id="使用-p-namespace-实现-XML-配置"><a href="#使用-p-namespace-实现-XML-配置" class="headerlink" title="使用 p-namespace 实现 XML 配置"></a>使用 p-namespace 实现 XML 配置</h3><p>如果你有许多的设值函数方法，那么在 XML 配置文件中使用 p-namespace 是非常方便的。让我们查看一下区别：<br>以带有 标签的标准 XML 配置文件为例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"john-classic"</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"John Doe"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spouse"</span> <span class="attr">ref</span>=<span class="string">"jane"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"jane"</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"John Doe"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述 XML 配置文件可以使用 p-namespace 以一种更简洁的方式重写，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"john-classic"</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:name</span>=<span class="string">"John Doe"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:spouse-ref</span>=<span class="string">"jane"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"jane"</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:name</span>=<span class="string">"John Doe"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里，不应该区别指定原始值和带有 p-namespace 的对象引用。-ref 部分表明这不是一个直接的值，而是对另一个 bean 的引用。</p><h2 id="注入内部Bean"><a href="#注入内部Bean" class="headerlink" title="注入内部Bean"></a>注入内部Bean</h2><p>Java 内部类是在其他类的范围内被定义的，同理，inner beans 是在其他 bean 的范围内定义的 bean。因此在 或 元素内 元素被称为内部bean，如下所示。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean using inner bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.TextEditor"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spellChecker"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"spellChecker"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.SpellChecker"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="注入集合"><a href="#注入集合" class="headerlink" title="注入集合"></a>注入集合</h2><p>Spring提供了四种集合类型的配置元素，可以使用<code>&lt;list&gt;</code>或<code>&lt;set&gt;</code>来连接任何 <code>java.util.Collection</code> 的实现或数组。</p><table><thead><tr><th>元素</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;list&gt;</code></td><td>它有助于连线，如注入一列值，允许重复</td></tr><tr><td><code>&lt;set&gt;</code></td><td>它有助于连线一组值，但不能重复</td></tr><tr><td><code>&lt;map&gt;</code></td><td>它可以用来注入名称-值对的集合，其中名称和值可以是任何类型</td></tr><tr><td><code>&lt;props&gt;</code></td><td>它可以用来注入名称-值对的集合，其中名称和值都是字符串类型</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCollection</span> </span>&#123;</span><br><span class="line">   List addressList;</span><br><span class="line">   Set  addressSet;</span><br><span class="line">   Map  addressMap;</span><br><span class="line">   Properties addressProp;</span><br><span class="line">   <span class="comment">// a setter method to set List</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddressList</span><span class="params">(List addressList)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.addressList = addressList;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// prints and returns all the elements of the list.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List <span class="title">getAddressList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"List Elements :"</span>  + addressList);</span><br><span class="line">      <span class="keyword">return</span> addressList;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// a setter method to set Set</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddressSet</span><span class="params">(Set addressSet)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.addressSet = addressSet;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// prints and returns all the elements of the Set.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Set <span class="title">getAddressSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Set Elements :"</span>  + addressSet);</span><br><span class="line">      <span class="keyword">return</span> addressSet;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// a setter method to set Map</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddressMap</span><span class="params">(Map addressMap)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.addressMap = addressMap;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// prints and returns all the elements of the Map.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">getAddressMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Map Elements :"</span>  + addressMap);</span><br><span class="line">      <span class="keyword">return</span> addressMap;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// a setter method to set Property</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddressProp</span><span class="params">(Properties addressProp)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.addressProp = addressProp;</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="comment">// prints and returns all the elements of the Property.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Properties <span class="title">getAddressProp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Property Elements :"</span>  + addressProp);</span><br><span class="line">      <span class="keyword">return</span> addressProp;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for javaCollection --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"javaCollection"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.JavaCollection"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- results in a setAddressList(java.util.List) call --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addressList"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>INDIA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Pakistan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- results in a setAddressSet(java.util.Set) call --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addressSet"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>INDIA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Pakistan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- results in a setAddressMap(java.util.Map) call --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addressMap"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"INDIA"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"Pakistan"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"USA"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"4"</span> <span class="attr">value</span>=<span class="string">"USA"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- results in a setAddressProp(java.util.Properties) call --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addressProp"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"one"</span>&gt;</span>INDIA<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"two"</span>&gt;</span>Pakistan<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"three"</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"four"</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="集合中注入bean引用"><a href="#集合中注入bean引用" class="headerlink" title="集合中注入bean引用"></a>集合中注入bean引用</h3><p>下面的 Bean 定义将帮助你理解如何注入 bean 的引用作为集合的元素。甚至你可以将引用和值混合在一起，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Bean Definition to handle references and values --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- Passing bean reference  for java.util.List --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addressList"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"address1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"address2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Pakistan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- Passing bean reference  for java.util.Set --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addressSet"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"address1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"address2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Pakistan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- Passing bean reference  for java.util.Map --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addressMap"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"INDIA"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span> =<span class="string">"two"</span> <span class="attr">value-ref</span>=<span class="string">"address1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span> =<span class="string">"three"</span> <span class="attr">value-ref</span>=<span class="string">"address2"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="注入-null-和空字符串的值"><a href="#注入-null-和空字符串的值" class="headerlink" title="注入 null 和空字符串的值"></a>注入 null 和空字符串的值</h3><p>如果你需要传递一个空字符串作为值，那么你可以传递它，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"exampleBean"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你需要传递一个 NULL 值，那么你可以传递它，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"exampleBean"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个基于应用程序的Java都有许多个对象，这些对象一起工作实现程序的功能，当编写一个复杂的Java应用程序时，应用程序类应该尽可能的独立于其他Java类来增加这些类重用的可能性，并且在做单元测试时，测试独立于其他类的独立性。依赖注入有助于把这些类粘合在一起，同时保证他们的独立性。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://wrxiang.top/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://wrxiang.top/tags/Spring/"/>
    
      <category term="依赖注入" scheme="http://wrxiang.top/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC容器</title>
    <link href="http://wrxiang.top/2019/10/28/Spring%20IOC%E5%AE%B9%E5%99%A8/"/>
    <id>http://wrxiang.top/2019/10/28/Spring IOC容器/</id>
    <published>2019-10-28T15:17:26.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<p>Spring容器是Spring框架的核心，容器创建配置并创建对象，并管理它们的生命周期（从创建到销毁），Spring容器通过依赖注入管理整个应用程序中的对象，这些对象被称为Spring Beans。<br>通过读取配置元数据提供的指令，容器知道需要对哪些对象进行实例化、配置以及组装。配置元数据可以通过XML、Java注解或Java代码来完成。IOC容器是具有依赖注入功能的容器，它可以配置并创建管理对象，IOC容器负责实例化、定位、配置应用程序中的对象以及建立这些对象间的依赖。通常new一个实例由程序员来控制，而现在这个过程交给Spring容器来完成，这就是常说的“控制反转”。<br><a id="more"></a></p><h2 id="Spring-BeanFactory容器"><a href="#Spring-BeanFactory容器" class="headerlink" title="Spring BeanFactory容器"></a>Spring BeanFactory容器</h2><p>Spring BeanFactory是最简单一个容器，它主要的功能是为依赖注入提供支持，这个容器接口在<code>org.springframework.beans.factory.BeanFactor</code>中被定义。BeanFactory和相关的接口，比如<code>BeanFactoryAware、DisposableBean、InitializingBean</code>，仍保留在Spring中，主要的目的是向后兼容已存在的那些和Spring整合在一起的第三方框架。<br>在Spring中，有大量对BeanFactory接口的实现，其中最常使用的是<code>XMLBeanFactory</code>类，这个容器从一个xml文件中读取配置元数据，由这些元数据来生成一个被配置化的系统或者应用。</p><h2 id="Spring-ApplicationContext-容器"><a href="#Spring-ApplicationContext-容器" class="headerlink" title="Spring ApplicationContext 容器"></a>Spring ApplicationContext 容器</h2><p>ApplicationContext是Spring中比较高级的容器，和BeanFactory类似，它可以加载配置文件中定义的bean，并维护它们之间的依赖关系，另外，它增加了企业级开发中所需要的功能，比如从属性文件中解析文本信息和将事件传递给所指定的监听器。这个容器在<code>org.springframework.context.ApplicationContext interface</code>接口中定义，ApplicationContext包含BeanFactory中所有功能，一般情况下，ApplicationContext会更加优秀，但是BeanFactory仍在一些轻量级的应用中使用，比如移动设备或者基于applet的应用程序。<br>常用的ApplicationContext 接口实现：</p><ul><li><strong>FileSystemXmlApplicationContext</strong>：该容器从XML文件中加载已被定义的bean，这里需要提供给构造器XML文件的完整路径</li><li><strong>ClassPathXmlApplicationContext</strong>：该容器从 XML 文件中加载已被定义的 bean。在这里，你不需要提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可，因为，容器会从 CLASSPATH 中搜索 bean 配置文件。</li><li><strong>WebXmlApplicationContext</strong>：该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。</li></ul><h2 id="Spring-bean定义"><a href="#Spring-bean定义" class="headerlink" title="Spring bean定义"></a>Spring bean定义</h2><p>bean是一个被实例化，组装并通过Spring IOC容器所管理的对象，这些对象是由用容器提供的配置元数据创建的。<br>bean常用配置属性如下：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>class</td><td>这个属性是强制性的，并且指定用来创建 bean 的 bean 类</td></tr><tr><td>name</td><td>这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符</td></tr><tr><td>scope</td><td>这个属性指定由特定的 bean 定义创建的对象的作用域，默认是单例模式</td></tr><tr><td>constructor-arg</td><td>它是用来注入依赖关系的</td></tr><tr><td>properties</td><td>它是用来注入依赖关系的</td></tr><tr><td>autowiring mode</td><td>它是用来注入依赖关系的</td></tr><tr><td>lazy-initialization mode</td><td>延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例</td></tr><tr><td>initialization</td><td>在 bean 的所有必需的属性被容器设置之后，调用回调方法</td></tr><tr><td>destruction</td><td>当包含该 bean 的容器被销毁时，使用回调方法</td></tr></tbody></table><h2 id="Spring-bean作用域"><a href="#Spring-bean作用域" class="headerlink" title="Spring bean作用域"></a>Spring bean作用域</h2><p>当在Spring定义一个bean时，必须声明其作用域，Spring中支持五个作用域：<code>singleton、prototype、request、session和global session</code>，以下是五种作用域的说明：</p><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>singleton</td><td>在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</td></tr><tr><td>prototype</td><td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</td></tr><tr><td>request</td><td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</td></tr><tr><td>session</td><td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</td></tr><tr><td>global-session</td><td>一般用于Portlet应用环境，该运用域仅适用于WebApplicationContext环境</td></tr></tbody></table><p><strong>singleton 作用域</strong>：singleton是默认的作用域，当定义bean时如果没有指定作用域配置项，则这个bean的作用域被默认为singleton。当一个bean的作用域被定义为singleton，那么Spring IOC容器中只会存在一个共享的bean实例，也就是说，只会创建该bean定义的唯一实例。<br>singleton是单例类型，在创建容器时就同事自动创建一个bean对象，不管是否使用，它都存在，而且每次获取到的对象都是同一个。<br><strong>prototype 作用域</strong>：当一个bean的作用域被定义为prototype，表示一个bean定义对应多个对象实例，prototype作用域的bean会导致在每次对该bean的请求（将其注入另一个bean或者以代码的方式调用容器中的getBean()方法）时都会创建一个新的bean实例。<br>prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当获取bean时才会创建对象，而且每次获取到的对象都不是同一个对象。</p><h2 id="Spring-Bean生命周期"><a href="#Spring-Bean生命周期" class="headerlink" title="Spring Bean生命周期"></a>Spring Bean生命周期</h2><p>Spring Bean的生命周期可以表示为：bean的定义-&gt;bean的初始化-&gt;bean的使用-&gt;bean的销毁，当一个bean被实例化时，它可能需要执行一些初始化操作使它转换成可用的状态，同样，当bean不再需要，并且要从容器中移除时，可能需要做一些清除工作。我们在定义bean时，声明两个属性： <strong>init-method</strong> 和  <strong>destroy-method</strong>，init-method属性指定一个方法，在实例化bean时，立即调用该方法，同样，destroy-method指定一个方法，只有从容器中移除bean时才调用该方法。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果程序中有太多相同名称的初始化或销毁方法的bean，那么我们不需要在每一个bean上声明初始化或销毁方法。框架使用元素中的<strong>default-init-method</strong> 和 <strong>default-destroy-method</strong> 属性提供了灵活地配置这种情况，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-init-method</span>=<span class="string">"init"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">default-destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Spring-Bean继承"><a href="#Spring-Bean继承" class="headerlink" title="Spring Bean继承"></a>Spring Bean继承</h2><p>bean中可以包含很多的配置信息，包括构造函数的参数，属性值，容器的具体信息，例如初始化方法，静态工厂方法等，在Spring中可以定义继承父定义的配置数据，子定义可以根据需要重写一些值或者添加其他值。<br>Spring Bean定义的继承和Java类的继承无关，但是继承的概念是一样的，可以定义一个父bean作为模板，其他子bean就可以从父bean中继承所需要的配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloWorld"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message1"</span> <span class="attr">value</span>=<span class="string">"Hello World!"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message2"</span> <span class="attr">value</span>=<span class="string">"Hello Second World!"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloIndia"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloIndia"</span> <span class="attr">parent</span>=<span class="string">"helloWorld"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message1"</span> <span class="attr">value</span>=<span class="string">"Hello India!"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message3"</span> <span class="attr">value</span>=<span class="string">"Namaste India!"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Spring-Bean后置处理器"><a href="#Spring-Bean后置处理器" class="headerlink" title="Spring Bean后置处理器"></a>Spring Bean后置处理器</h2><p>Spring Bean后置处理器允许在调用初始化方法前后对bean进行额外的处理，<strong>BeanPostProcessor</strong> 接口定义回调方法，可以实现该方法来提供自己的实例化逻辑，依赖解析逻辑等，也可以在 Spring 容器通过插入一个或多个 BeanPostProcessor 的实现来完成实例化，配置和初始化一个bean之后实现一些自定义逻辑回调方法。<br>可以配置多个 BeanPostProcessor 接口，通过设置 BeanPostProcessor 实现的 Ordered 接口提供的 order 属性来控制这些 BeanPostProcessor 接口的执行顺序。<br>BeanPostProcessor 可以对 bean（或对象）实例进行操作，这意味着 Spring IoC 容器实例化一个 bean 实例，然后 BeanPostProcessor 接口进行它们的工作。 ApplicationContext 会自动检测由 BeanPostProcessor 接口的实现定义的 bean，注册这些 bean 为后置处理器，然后通过在容器中创建 bean，在适当的时候调用它。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Your Message : "</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Bean is going through init."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Bean will destroy now."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是实现 BeanPostProcessor 的非常简单的例子，它在任何 bean 的初始化的之前和之后输入该 bean 的名称。可以在初始化 bean 的之前和之后实现更复杂的逻辑，因为有两个访问内置 bean 对象的后置处理程序的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitHelloWorld</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"BeforeInitialization : "</span> + beanName);</span><br><span class="line">      <span class="keyword">return</span> bean;  <span class="comment">// you can return any other object as well</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"AfterInitialization : "</span> + beanName);</span><br><span class="line">      <span class="keyword">return</span> bean;  <span class="comment">// you can return any other object as well</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是 MainApp.java 文件的内容。在这里，你需要注册一个在 AbstractApplicationContext 类中声明的关闭 hook 的 registerShutdownHook() 方法。它将确保正常关闭，并且调用相关的 destroy 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      AbstractApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Beans.xml"</span>);</span><br><span class="line">      HelloWorld obj = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">      context.registerShutdownHook();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是 init 和 destroy 方法需要的配置文件 Beans.xml 文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloWorld"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"Hello World!"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.InitHelloWorld"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>一旦你创建源代码和 bean 配置文件完成后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BeforeInitialization : helloWorld</span><br><span class="line">Bean is going through init.</span><br><span class="line">AfterInitialization : helloWorld</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">Bean will destroy now.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring容器是Spring框架的核心，容器创建配置并创建对象，并管理它们的生命周期（从创建到销毁），Spring容器通过依赖注入管理整个应用程序中的对象，这些对象被称为Spring Beans。&lt;br&gt;通过读取配置元数据提供的指令，容器知道需要对哪些对象进行实例化、配置以及组装。配置元数据可以通过XML、Java注解或Java代码来完成。IOC容器是具有依赖注入功能的容器，它可以配置并创建管理对象，IOC容器负责实例化、定位、配置应用程序中的对象以及建立这些对象间的依赖。通常new一个实例由程序员来控制，而现在这个过程交给Spring容器来完成，这就是常说的“控制反转”。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://wrxiang.top/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://wrxiang.top/tags/Spring/"/>
    
      <category term="IOC" scheme="http://wrxiang.top/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>代码优雅之道（一）</title>
    <link href="http://wrxiang.top/2019/10/28/%E4%BB%A3%E7%A0%81%E4%BC%98%E9%9B%85%E4%B9%8B%E9%81%93(%E4%B8%80)/"/>
    <id>http://wrxiang.top/2019/10/28/代码优雅之道(一)/</id>
    <published>2019-10-28T10:33:40.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化集合时尽量指定其大小"><a href="#初始化集合时尽量指定其大小" class="headerlink" title="初始化集合时尽量指定其大小"></a>初始化集合时尽量指定其大小</h2><blockquote><p>尽量在初始化集合时指定集合或对象的大小，能够有效减少集合扩容的次数，因为集合每次扩容的时间复杂度很可能时O(n)，耗费时间和性能。</p></blockquote><a id="more"></a><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化list，往list 中添加元素反例：</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化list，往list 中添加元素正例：</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">//指定集合list 的容量大小</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(arr.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用StringBuilder拼接字符串"><a href="#使用StringBuilder拼接字符串" class="headerlink" title="使用StringBuilder拼接字符串"></a>使用StringBuilder拼接字符串</h2><blockquote><p>一般的字符串拼接在编译期Java 会对其进行优化，但是在循环中字符串的拼接Java 编译期无法执行优化，所以需要使用StringBuilder 进行替换。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在循环中拼接字符串反例</span></span><br><span class="line">String str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="comment">//在循环中字符串拼接Java 不会对其进行优化</span></span><br><span class="line">    str += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在循环中拼接字符串正例</span></span><br><span class="line">String str1 = <span class="string">"Love"</span>;</span><br><span class="line">String str2 = <span class="string">"Courage"</span>;</span><br><span class="line">String strConcat = str1 + str2;  <span class="comment">//Java 编译器会对该普通模式的字符串拼接进行优化</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">   <span class="comment">//在循环中，Java 编译器无法进行优化，所以要手动使用StringBuilder</span></span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用Collection-isEmpty-检测空"><a href="#使用Collection-isEmpty-检测空" class="headerlink" title="使用Collection.isEmpty() 检测空"></a>使用Collection.isEmpty() 检测空</h2><blockquote><p>使用Collection.size() 来检测是否为空在逻辑上没有问题，但是使用Collection.isEmpty() 使得代码更易读，并且可以获得更好的性能；除此之外，任何Collection.isEmpty() 实现的时间复杂度都是O(1) ，不需要多次循环遍历，但是某些通过Collection.size() 方法实现的时间复杂度可能是O(n)</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;Object&gt; collection = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (collection.size() == <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"collection is empty."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;Object&gt; collection = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (collection.isEmpty())&#123;</span><br><span class="line">    System.out.println(<span class="string">"collection is empty."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测是否为null 可以使用CollectionUtils.isEmpty()</span></span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(collection))&#123;</span><br><span class="line">    System.out.println(<span class="string">"collection is null."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="若需频繁调用Collection-contains-方法则使用Set"><a href="#若需频繁调用Collection-contains-方法则使用Set" class="headerlink" title="若需频繁调用Collection.contains 方法则使用Set"></a>若需频繁调用Collection.contains 方法则使用Set</h2><blockquote><p>在Java 集合类库中，List的contains 方法普遍时间复杂度为O(n)，若代码中需要频繁调用contains 方法查找数据则先将集合list 转换成HashSet 实现，将O(n) 的时间复杂度将为O(1)。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//频繁调用Collection.contains() 反例</span></span><br><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)&#123;</span><br><span class="line">    <span class="comment">//时间复杂度为O(n)</span></span><br><span class="line">    <span class="keyword">if</span> (list.contains(i))</span><br><span class="line">    System.out.println(<span class="string">"list contains "</span>+ i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//频繁调用Collection.contains() 正例</span></span><br><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Set&lt;Object&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)&#123;</span><br><span class="line">    <span class="comment">//时间复杂度为O(1)</span></span><br><span class="line">    <span class="keyword">if</span> (set.contains(i))&#123;</span><br><span class="line">        System.out.println(<span class="string">"list contains "</span>+ i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="字符串转化使用String-valueOf-value-代替-“-“-value"><a href="#字符串转化使用String-valueOf-value-代替-“-“-value" class="headerlink" title="字符串转化使用String.valueOf(value) 代替 “ “ + value"></a>字符串转化使用String.valueOf(value) 代替 “ “ + value</h2><blockquote><p>把其它对象或类型转化为字符串时，使用String.valueOf(value) 比 “”+value 的效率更高。</p></blockquote><p>反例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把其它对象或类型转化为字符串反例：</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">520</span>;</span><br><span class="line">String strLove = <span class="string">""</span> + num;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把其它对象或类型转化为字符串正例：</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">520</span>;</span><br><span class="line"><span class="comment">// String.valueOf() 效率更高</span></span><br><span class="line">String strLove = String.valueOf(num);</span><br></pre></td></tr></table></figure></p><h2 id="避免使用BigDecimal-double"><a href="#避免使用BigDecimal-double" class="headerlink" title="避免使用BigDecimal(double)"></a>避免使用BigDecimal(double)</h2><blockquote><p>BigDecimal(double) 存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BigDecimal 反例    </span></span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="number">0.11</span>D);</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BigDecimal 正例</span></span><br><span class="line">BigDecimal bigDecimal1 = bigDecimal.valueOf(<span class="number">0.11</span>D);</span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(String.valueOf(<span class="number">0.11</span>D));</span><br></pre></td></tr></table></figure></p><h2 id="返回空数组和集合而非-null"><a href="#返回空数组和集合而非-null" class="headerlink" title="返回空数组和集合而非 null"></a>返回空数组和集合而非 null</h2><blockquote><p>若程序运行返回null，需要调用方强制检测null，否则就会抛出空指针异常；返回空数组或空集合，有效地避免了调用方因为未检测null 而抛出空指针异常的情况，还可以删除调用方检测null 的语句使代码更简洁。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回null 反例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result[] getResults() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Result&gt; <span class="title">getResultList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Result&gt; <span class="title">getResultMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回空数组和空集正例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result[] getResults() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Result&gt; <span class="title">getResultList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Result&gt; <span class="title">getResultMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="优先使用常量或确定值调用equals-方法"><a href="#优先使用常量或确定值调用equals-方法" class="headerlink" title="优先使用常量或确定值调用equals 方法"></a>优先使用常量或确定值调用equals 方法</h2><blockquote><p>对象的equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals 方法。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用 equals 方法反例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileReader</span><span class="params">(String fileName)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="comment">// 可能抛空指针异常</span></span><br><span class="line">    <span class="keyword">return</span> fileName.equals(<span class="string">"Charming"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用 equals 方法正例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileReader</span><span class="params">(String fileName)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="comment">// 使用常量或确定有值的对象来调用 equals 方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Charming"</span>.equals(fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//或使用：java.util.Objects.equals() 方法</span></span><br><span class="line">   <span class="keyword">return</span> Objects.equals(<span class="string">"Charming"</span>,fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="枚举的属性字段必须是私有且不可变"><a href="#枚举的属性字段必须是私有且不可变" class="headerlink" title="枚举的属性字段必须是私有且不可变"></a>枚举的属性字段必须是私有且不可变</h2><blockquote><p>枚举通常被当做常量使用，如果枚举中存在公共属性字段或设置字段方法，那么这些枚举常量的属性很容易被修改；理想情况下，枚举中的属性字段是私有的，并在私有构造函数中赋值，没有对应的Setter 方法，最好加上final 修饰符。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SwitchStatus &#123;</span><br><span class="line">    <span class="comment">// 枚举的属性字段反例</span></span><br><span class="line">    DISABLED(<span class="number">0</span>, <span class="string">"禁用"</span>),</span><br><span class="line">    ENABLED(<span class="number">1</span>, <span class="string">"启用"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SwitchStatus</span><span class="params">(<span class="keyword">int</span> value, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SwitchStatus &#123;</span><br><span class="line">    <span class="comment">// 枚举的属性字段正例</span></span><br><span class="line">    DISABLED(<span class="number">0</span>, <span class="string">"禁用"</span>),</span><br><span class="line">    ENABLED(<span class="number">1</span>, <span class="string">"启用"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SwitchStatus</span><span class="params">(<span class="keyword">int</span> value, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有Setter 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="工具类中屏蔽构造函数"><a href="#工具类中屏蔽构造函数" class="headerlink" title="工具类中屏蔽构造函数"></a>工具类中屏蔽构造函数</h2><blockquote><p>工具类是一堆静态字段和函数的集合，其不应该被实例化；但是，Java 为每个没有明确定义构造函数的类添加了一个隐式公有构造函数，为了避免不必要的实例化，应该显式定义私有构造函数来屏蔽这个隐式公有构造函数。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//工具类构造函数反例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CRYPT_ALGO = <span class="string">"PBEWithMD5AndDES"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptPassword</span><span class="params">(String aPassword)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PasswordUtils(aPassword).encrypt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//工具类构造函数正例</span></span><br><span class="line">    <span class="comment">//定义私有构造函数来屏蔽这个隐式公有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PasswordUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CRYPT_ALGO = <span class="string">"PBEWithMD5AndDES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptPassword</span><span class="params">(String aPassword)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PasswordUtils(aPassword).encrypt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="删除多余的异常捕获并抛出"><a href="#删除多余的异常捕获并抛出" class="headerlink" title="删除多余的异常捕获并抛出"></a>删除多余的异常捕获并抛出</h2><blockquote><p>用catch 语句捕获异常后，若什么也不进行处理，就只是让异常重新抛出，这跟不捕获异常的效果一样，可以删除这块代码或添加别的处理。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多余异常反例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">fileReader</span><span class="params">(String fileName)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileName))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            builder.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//仅仅是重复抛异常 未作任何处理</span></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多余异常正例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">fileReader</span><span class="params">(String fileName)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileName))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            builder.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">        <span class="comment">//删除多余的抛异常，或增加其他处理：</span></span><br><span class="line">        <span class="comment">/*catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">            return "fileReader exception";</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="迭代entrySet-获取Map-的key-和valuev"><a href="#迭代entrySet-获取Map-的key-和valuev" class="headerlink" title="迭代entrySet() 获取Map 的key 和valuev"></a>迭代entrySet() 获取Map 的key 和valuev</h2><blockquote><p>当循环中只需要获取Map 的主键key时，迭代keySet() 是正确的；但是，当需要主键key 和取值value 时，迭代entrySet() 才是更高效的做法，其比先迭代keySet() 后再去通过get 取值性能更佳。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map 获取value 反例:</span></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet())&#123;</span><br><span class="line">    String value = map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Map 获取key &amp; value 正例:</span></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : map.entrySet())&#123;</span><br><span class="line">     String key = entry.getKey();</span><br><span class="line">     String value = entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用静态代码块实现赋值静态成员变量"><a href="#使用静态代码块实现赋值静态成员变量" class="headerlink" title="使用静态代码块实现赋值静态成员变量"></a>使用静态代码块实现赋值静态成员变量</h2><blockquote><p>对于集合类型的静态成员变量，应该使用静态代码块赋值，而不是使用集合实现来赋值。</p></blockquote><p>反例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值静态成员变量反例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;()&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        map.put(<span class="string">"Leo"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"Family-loving"</span>,<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">"Cold on the out side passionate on the inside"</span>,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;()&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        list.add(<span class="string">"Sagittarius"</span>);</span><br><span class="line">        list.add(<span class="string">"Charming"</span>);</span><br><span class="line">        list.add(<span class="string">"Perfectionist"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值静态成员变量正例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    map.put(<span class="string">"Leo"</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">"Family-loving"</span>,<span class="number">2</span>);</span><br><span class="line">    map.put(<span class="string">"Cold on the out side passionate on the inside"</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    list.add(<span class="string">"Sagittarius"</span>);</span><br><span class="line">    list.add(<span class="string">"Charming"</span>);</span><br><span class="line">    list.add(<span class="string">"Perfectionist"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="MyBatis-不要为了多个查询条件而写-1-1"><a href="#MyBatis-不要为了多个查询条件而写-1-1" class="headerlink" title="MyBatis 不要为了多个查询条件而写 1 = 1"></a>MyBatis 不要为了多个查询条件而写 1 = 1</h2><blockquote><p>当遇到多个查询条件，使用where 1=1 可以很方便的解决我们的问题，但是这样很可能会造成非常大的性能损失，因为添加了 “where 1=1 ”的过滤条件之后，数据库系统就无法使用索引等查询优化策略，数据库系统将会被迫对每行数据进行扫描（即全表扫描） 以比较此行是否满足过滤条件，当表中的数据量较大时查询速度会非常慢；此外，还会存在SQL 注入的风险。</p></blockquote><p>反例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookInfo"</span> <span class="attr">parameterType</span>=<span class="string">"com.tjt.platform.entity.BookInfo"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line"> select count(*) from t_rule_BookInfo t where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title !=null and title !='' "</span>&gt;</span></span><br><span class="line"> AND title = #&#123;title&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author !=null and author !='' "</span>&gt;</span></span><br><span class="line"> AND author = #&#123;author&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>正例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookInfo"</span> <span class="attr">parameterType</span>=<span class="string">"com.tjt.platform.entity.BookInfo"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line"> select count(*) from t_rule_BookInfo t</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title !=null and title !='' "</span>&gt;</span></span><br><span class="line"> title = #&#123;title&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author !=null and author !='' "</span>&gt;</span> </span><br><span class="line"> AND author = #&#123;author&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="删除未使用的局部变量、方法参数、私有方法、字段和多余的括号"><a href="#删除未使用的局部变量、方法参数、私有方法、字段和多余的括号" class="headerlink" title="删除未使用的局部变量、方法参数、私有方法、字段和多余的括号"></a>删除未使用的局部变量、方法参数、私有方法、字段和多余的括号</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始化集合时尽量指定其大小&quot;&gt;&lt;a href=&quot;#初始化集合时尽量指定其大小&quot; class=&quot;headerlink&quot; title=&quot;初始化集合时尽量指定其大小&quot;&gt;&lt;/a&gt;初始化集合时尽量指定其大小&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;尽量在初始化集合时指定集合或对象的大小，能够有效减少集合扩容的次数，因为集合每次扩容的时间复杂度很可能时O(n)，耗费时间和性能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="代码规范" scheme="http://wrxiang.top/categories/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="代码规范" scheme="http://wrxiang.top/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>HIS医保接口设计规范</title>
    <link href="http://wrxiang.top/2019/09/09/HIS%E5%8C%BB%E4%BF%9D%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>http://wrxiang.top/2019/09/09/HIS医保接口设计规范/</id>
    <published>2019-09-09T22:30:03.000Z</published>
    <updated>2021-10-07T10:08:33.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;&emsp;医保接口的开发可以说是HIS系统中极其重要的一部分，从某种意义上讲，医保接口实施的好坏直接影响项目总体的进度和效果，但是由于医保政策的复杂性，再加上医保往往有很大的地区差异，在项目交付的过程中，软件设计及开发人员经产会遇到许多比较复杂或者难以解决的问题。<br>&emsp;&emsp;结合之前项目中医保实施的经验，并对医保接口设计过程中的方法进行归纳，给出一种比较完善的设计解决方法和规范，可以帮助研发或实施人员更好的实施医保，目前只是一个粗糙的框架，还需要医保实践不断的进行扩充，以至形成一种比较稳定完善的综合性解决方案。<br><a id="more"></a></p><h2 id="医疗政策软件"><a href="#医疗政策软件" class="headerlink" title="医疗政策软件"></a>医疗政策软件</h2><p>&emsp;&emsp;通过对北京安宁盈科、创智和宇、东软、首都信息、杭州新世纪、建达电子、万达信息等各个医保政策软件提供商提供的接口方案进行分析，总结出他们之间的异同性如下：</p><ol><li>一般都提供DOS和Windows两套方案，Windows下一般以WIN32 API的形式进行调用（dll提供了政策函数），这里我们以Windows为重点进行说明。</li><li>政策函数一般分为两类：单个函数和多个函数两种设计类型。多个函数是指每种业务或者比较相似的业务为一个函数，这样组成登记、结算、退费等，如杭州新世纪；单个函数是指所有业务都用一个函数实现，参数一般使用结构字符串实现，如东软公司。</li><li>结算时费用明细数据分为实时上传和非实时上传，实时上传要求结算时就将费用明细上传至医保中心，比如首都信息公司接口，非实时上传则是为了减少网络阻塞，结算时只上传大类费用或总费用，费用明细可隔天上传，比如上海万达公司。</li><li>住院或门诊发生费用时，药品/项目的自负比例一般分为三种类别，第一种自负比例按照HIS中设置的计算，并且也不用审批；第二种HIS中需要根据医保中心下发的药品/项目字典维护对照表，按照对照表中的自负比例计算，并且需要审批；第三种HIS计算费用时不管自负比例，只需对照好编码，在上传费用时医保中心会返回每条费用的自负比例。</li><li>结算前一般都需要刷卡，有些地区的医保允许只在挂号或登记时刷卡，结算时可以不刷卡，只要能将个人信息从HIS中取出即可。</li><li>结算分为预结算及结算两部分，预结算阶段处理数据的上传或调用医保的结算计算函数获取医保支付信息，结算阶段执行结算处理，和医保政策软件进行结算交易。一般预结算和结算医保政策软件返回的医保支付信息是一致的，但是在医保实施的过程中确实也发现有少数的医保在某些情况下预结算和结算结果不同，一旦出现这种情况，是需要HIS进行相应的处理的。</li></ol><h2 id="医保病人就诊流程"><a href="#医保病人就诊流程" class="headerlink" title="医保病人就诊流程"></a>医保病人就诊流程</h2><p>医保病人就诊的一般流程是：登记 → 发生费用 → 结算，此外还有结算作废、退款补结算等操作</p><ul><li>登记：登记一般需要验证身份，一些医保可能还需要输入一些病人的入院信息。</li><li>发生费用：有些医保需要对药品/项目进行审批，有些则要按照统一的目录取值，这就要求HIS在记费时药品/项目和医保之间有一个对照。</li><li>结算：验证身份 → 预结算计算费用信息并获取医保支付信息 → 确认结算发送确认交易请求。</li><li>结算作废：一般需要验证身份，然后调用医保的结算作废，将操作的医保结算作废掉。</li><li>退款补结算：这里不是指结算作废，而是只退一部分，某些医保支持部分退的功能，有些不支持，支持的可以直接根据医保政策软件做，不支持的医保可以采取全部退然后再收一部分的步骤来实现。</li></ul><p>对医保病人的就诊流程分析，我们可以看到尽管医保政策软件的接口千差万别，但是HIS中关注的操作主要是以下几个：身份验证、登记、预结算、结算、结算作废</p><h2 id="接口规范设计"><a href="#接口规范设计" class="headerlink" title="接口规范设计"></a>接口规范设计</h2><p>&emsp;&emsp;通过对医保政策软件以及医保病人就诊结算的流程进行分析，我们希望能够利用各个医保政策软件的共性，屏蔽其差异，隔离HIS和医保政策软件之间的业务交互，这样对于HIS来说，调用方式和接口是相同的，有利于医保的批量实施以及迎合各地医保业务的多变性，减少HIS程序频繁的修改和后期运维工作，所以医保接口设计规范总的原则如下：</p><ol><li>HIS端业务和医保政策软件隔离，HIS窗口业务中不要加入医保的处理过程，但是可以加入对象方法的调用。不同的医保封装为不同的对象，对外暴漏统一的方法，根据不同的医保调用不同医保对象中的方法，这样的话上线医保仅需增加医保对象即可。这里需要注意的是医保对象的切换不要使用if进行判断，因为随着上线项目越来越多，需要支持的医保也不断增加，大量的if不利于系统维护，通过设计模式可以解决类似的应用场景。</li><li>将HIS中调用医保的位置，事件名称及具体业务明确化，规范化，尽量减少HIS中调用医保接口的地方，或者在一个函数事件中集中处理，利于维护。</li><li>函数返回值单一化，只有成功或失败两种情况，其他的返回信息可以组装成JSON返回。</li><li>务必保证两个事务的一致性，很多地区做医保时没有考虑到这个问题，导致做报表时数据不一致。一般可以先进行HIS业务，再做医保业务，这样有个好处HIS业务正常才会调用医保，而且万一医保失败我们可以回滚HIS业务。很多HIS系统和医保政策软件进行交易时往往先调用医保接口，医保成功才会进行HIS业务，这样做主要是要确保HIS成功则医保一定是成功的，采用这种方式万一医保成功，HIS失败则需要提供工具，可以让操作员或者实施人员能够撤销医保的这次交易，并且需要保证一次结算不能重复的调用医保结算交易，保证数据的正确性。无论是先调用医保还是后调用医保，都需要保证HIS和医保的事务一致性。</li></ol><h2 id="用户接口函数"><a href="#用户接口函数" class="headerlink" title="用户接口函数"></a>用户接口函数</h2><p>医保政策软件对应的医保处理对象中必须包含以下对外调用的接口函数</p><h3 id="门诊挂号"><a href="#门诊挂号" class="headerlink" title="门诊挂号"></a>门诊挂号</h3><ul><li>ReadCardRegistOp：门诊挂号中，在挂号界面里的读卡键或卡号显示框触发回车时产生该请求，此操作用于病人的身份验证</li><li>ReadyRegistOp：门诊挂号中，点击挂号结算按钮时产生该请求，主要是调用医保挂号计算方法获取医保支付信息</li><li>ConfirmRegistOp：门诊挂号中，点击确定按钮产生该请求，真正的医保结算交易此时调用</li><li>AbortRegistOp：门诊挂号中，HIS在调用挂号确认（ConfirmRegistOp）成功后，HIS保存数据失败，HIS需自动产生该请求，用来取消之前的挂号操作，主要用在先结医保后结HIS的业务场景下</li><li>PrintRegistOp：门诊挂号中，票据打印时产生该请求，用于获取发票上显示的医保支付相关信息</li><li>ReadCardCancelRegistOp：门诊退号中，点击读卡或者回车事件产生该请求</li><li>CancelRegistOp：门诊退号中，点击确定时产生该请求，撤销医保的挂号交易</li></ul><h3 id="门诊收费"><a href="#门诊收费" class="headerlink" title="门诊收费"></a>门诊收费</h3><ul><li>ReadCardChargeOp：门诊收费中，在收费界面点击读卡时产生该请求，用于病人的身份认证</li><li>CalcFeeChargeOp：门诊开单时，录入费用明细时产生该请求，用于获取药品/项目的自费和自负比例</li><li>ReadyChargeOp：门诊收费中，点击收费结算键时产生该请求，用于进行费用明细的上传，调用医保结算计算方法获取医保支付信息操作</li><li>CancelReadyChargeOp：门诊收费中，在关闭结算窗口取消正在进行的结算时需自动产生该请求，用于撤销预结算（ReadyChargeOp）操作中进行过的撤销费用上传等操作</li><li>ConfirmChargeOp：门诊收费中，在收费界面点击确认时产生该请求</li><li>AbortChargeOp：门诊收费中，在HIS调用收费确认（ConfirmChargeOp）成功后，HIS保存数据失败，HIS需自动产生该请求，用来取消之前的结算操作，主要用在先结医保后结HIS的业务场景下。</li><li>PrintChargeOp：门诊收费中，票据打印时产生该请求，用于获取发票上显示的医保支付相关信息</li><li>ReadCardCanelChargesOp：门诊退费中，点击读卡或回车事件产生该请求</li><li>CancelChargeOp：门诊退费中，退款界面点击确认产生该请求</li></ul><h3 id="住院业务"><a href="#住院业务" class="headerlink" title="住院业务"></a>住院业务</h3><ul><li>ReadCardRegistIp：住院登记时，读卡键产生该请求</li><li>ReadyRegistOp：住院登记时，某些医保可能会要求填写一些入院信息，而这些信息是此类医保专属，这样则可以统一在此事件中进行输入</li><li>ConfirmRegistIp：住院登记，点击确认键时产生该请求</li><li>ReadCardCancelRegistOp：住院取消登记时，点击读卡或者回车事件产生该请求</li><li>CancelRegistIp：住院取消登记时，点击确认按钮时产生该请求</li><li>CalcFeeChargeIp：住院业务中，进行费用记账时产生该请求，用于获取药品/项目的自费和自负比例</li><li>ReadyChargeIp：住院结算时，点击收费结算键时产生该请求，用于进行费用明细的上传，调用医保结算计算方法获取医保支付信息操作</li><li>CancelReadyChargeIp：住院结算时，在关闭结算窗口取消正在进行的结算时需自动产生该请求，用于撤销预结算（ReadyChargeOp）操作中进行过的撤销费用上传等操作</li><li>ConfirmChargeIp：住院结算中，在收费界面点击确认时产生该请求</li><li>AbortChargeIp：住院结算中，在HIS调用收费确认（ConfirmChargeIp）成功后，HIS保存数据失败，HIS需自动产生该请求，用来取消之前的结算操作，主要用在先结医保后结HIS的业务场景下。</li><li>PrintChargeOp：住院结算中，票据打印时产生该请求，用于获取发票上显示的医保支付相关信息</li></ul><p>&emsp;&emsp;通过以上接口设计可以看出，在HIS中埋入指定的事件，在特定操作的时候触发，这样将不同医保的不同接口进行统一，隔离了HIS和医保接口之间的业务操作，降低了耦合度，提升了程序的可维护性。程序需要一个医保父类实现所有的接口，父类中所有方法均按照自费提供返回值，各个地区不同的医保都需要继承父类，根据医保政策软件实现不同的医保接口业务，HIS中触发的事件无论医保业务中需不需要处理，医保对象中都需要有指定的方法触发或者调用父类的方法，比如上海市门诊医保不需要上传费用明细，在CancelReadyChargeOp事件中则不需要和医保交互，直接返回正确即可，而河南省医保预结算前需要上传费用明细，CancelReadyChargeOp事件中则需要和医保交互撤销上传的费用明细。<br>&emsp;&emsp;随着不断的医保实践，现在设计规范有可能不符合某些地区医保接口，HIS中有可能会增加触发事件，这样我们需要在父类中增加相应的事件，然后在特定的医保子类对象中重写该事件即可，严禁将业务嵌入HIS业务中。</p><h2 id="医保政策软件的调用"><a href="#医保政策软件的调用" class="headerlink" title="医保政策软件的调用"></a>医保政策软件的调用</h2><p>&emsp;&emsp;随着技术的发展，BS架构的HIS程序越来越多，HIS中对于医保政策软件的调用必不可少，医保政策软件大多是提供dll来让HIS厂商进行调用，我们采取最多的方法是将dll封装为ocx，在客户端注册然后浏览器中作为插件进行相应方法的调用，这种方式对于程序的正常使用是没有问题的，但是考虑到程序的稳定性，拓展性以及浏览器的支持，这里提出另一种调用方式：在客户端运行一个专门用于调用本地程序的软件，浏览器通过http的方式和该程序进行交互，该程序收到请求后调用医保政策软件，然后将结果返回给浏览器。<br>&emsp;&emsp;在浏览器和医保政策软件中增加这个中间程序，可以降低浏览器因插件崩溃的几率，而且浏览器不受插件的限制，可以升级到更高版本，享受浏览器性能上的优化，浏览器调用dll的优化方案可参考以下链接内容:</p><p><a href="https://wrxiang.github.io/2019/01/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/" target="_blank" rel="noopener">浏览器调用本地程序的一些想法</a><br><a href="https://github.com/wrxiang/WebRunLocal/" target="_blank" rel="noopener">浏览器调用本地程序程序实现</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;医保接口的开发可以说是HIS系统中极其重要的一部分，从某种意义上讲，医保接口实施的好坏直接影响项目总体的进度和效果，但是由于医保政策的复杂性，再加上医保往往有很大的地区差异，在项目交付的过程中，软件设计及开发人员经产会遇到许多比较复杂或者难以解决的问题。&lt;br&gt;&amp;emsp;&amp;emsp;结合之前项目中医保实施的经验，并对医保接口设计过程中的方法进行归纳，给出一种比较完善的设计解决方法和规范，可以帮助研发或实施人员更好的实施医保，目前只是一个粗糙的框架，还需要医保实践不断的进行扩充，以至形成一种比较稳定完善的综合性解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="程序员日常思考" scheme="http://wrxiang.top/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%97%A5%E5%B8%B8%E6%80%9D%E8%80%83/"/>
    
    
      <category term="HIS" scheme="http://wrxiang.top/tags/HIS/"/>
    
      <category term="医保" scheme="http://wrxiang.top/tags/%E5%8C%BB%E4%BF%9D/"/>
    
  </entry>
  
  <entry>
    <title>增量部署和全量部署</title>
    <link href="http://wrxiang.top/2019/06/20/%E5%A2%9E%E9%87%8F%E9%83%A8%E7%BD%B2%E5%92%8C%E5%85%A8%E9%87%8F%E9%83%A8%E7%BD%B2/"/>
    <id>http://wrxiang.top/2019/06/20/增量部署和全量部署/</id>
    <published>2019-06-20T18:38:35.000Z</published>
    <updated>2021-10-07T10:08:33.951Z</updated>
    
    <content type="html"><![CDATA[<p>应用部署是工程人员（包括开发、测试和运维），每天需要面对的重要工作之一，尤其是交付比较频繁的项目，工程人员需要花费很多的时间和精力去完成越来越频繁的部署工作，那么部署的方式是选择增量部署还是全量部署呢？<br><a id="more"></a></p><h2 id="增量部署"><a href="#增量部署" class="headerlink" title="增量部署"></a>增量部署</h2><p>增量部署一般是指在部署的过程中提取提取当前版本和部署版本之间的增量文件，并且在部署的过程种仅更新增量部分。<br>这种部署方式在很多的项目中有着比较广泛的应用，使用这种部署方式的主要原因如下：</p><ol><li>部署速度快，增量部署每次仅对增量文件进行更新，无论是文件传输还是配置更新覆盖的内容都会比较少，部署的时间也会相应的缩短。</li><li>减少生产环境的变化量，增量部署减少了生产环境的变化幅度，而且本次部署哪些内容发生变化可控，出现问题比较容易追踪，而且也不需要再对已配置过的文件重新进行设置，降低出错的概率。</li></ol><h2 id="全量部署"><a href="#全量部署" class="headerlink" title="全量部署"></a>全量部署</h2><p>全量部署相对于增量部署，是对项目中全部文件进行更新部署，相对于增量部署，能够保证线上环境和发布版本的一致性，而且对于计划外的部署（为修改一个问题临时更改生产环境文件），具有很高的容错性。但是全量部署是更新系统全部文件，部署环境变化幅度大，文件的传输，部署速度会比较慢。</p><h2 id="部署方式的选择"><a href="#部署方式的选择" class="headerlink" title="部署方式的选择"></a>部署方式的选择</h2><p>在选择部署方式之前，我们先来考虑一下对于一个部署操作来说，哪些指标是最为重要的，部署的可重复性，可预测性以及可回滚性是最为核心的考量，其次才是部署的效率和安全。<br>随着系统的持续集成，部署的情况越来越多，系统的部署存在以下特点：</p><ol><li><strong>部署操作次数多</strong>，持续交付已经成为企业的普遍追求，也是IT服务能力的核心指标，当部署次数多起来，每次部署的可预测性以及可回滚性是最基础的保障。</li><li><strong>部署环境变化多</strong>，部署环境不仅仅局限于开发、测试、仿真以及生产环境，而且每个环境中部署频繁，这就对部署的可重复性提出很高的要求。</li><li><strong>部署操作人员多</strong>，随着自动化部署以及持续集成的普及，越来越多的人需要有执行部署操作的能力。这不仅包括传统的开发、测试和运维人员，还包括公司管理人员，甚至市场及销售人员都需要有自己快速部署一套系统（用于演示或者其他目的）的需求。这也要求部署操作有很好的可预测性和可重复性。</li></ol><p>如果对照以上特点，增量部署很难满足全部的要求，具体原因如下：</p><ol><li><strong>增量部署对于任何部署外的更新非常敏感，降低了部署流程的可预期性</strong>。在日常工作中经常会出现为修复一个问题而临时修改运行环境的部署外更新，一旦这些部署外更新未及时考虑到增量计算中，非常容易导致之后的增量部署失败。全量部署过程则会完整执行完整个环境的配置、初始化以及部署工作，对于这些部署外更新有更好的容错性。</li><li><strong>增量部署让回滚操作变得非常不容易</strong>。每次回滚都需要逆向计算增量部分，然后做回滚操作。及时的备份策略有机会降低这个难道，但是如果需要回滚多个版本仍然是一个巨大的挑战。</li><li><strong>增量部署无法直接满足从头部署最新系统的日常需求</strong>。在云环境中资源的动态变化（尤其是虚机的增加和减少）逐渐会成为一个常态，用户时刻都可能面对两种场景的部署要求：从上个版本升级到最新版本，或者从零重新部署最新版本应用。显然，这两种部署需求一个增量更新，另一个则是全量更新。</li></ol><p>如上这些挑战都让增量部署模式越来越难满足高频部署的工程需求，越来越多的自动化部署系统及工具都选择了全量部署模式。当然，在选择全量部署模式时，前面提到的全量部署模式弊端也需要认真考虑。简单来说，我们可以通过下面这些策略解决或者缓解这些弊端：</p><ul><li>提前在本地准备好全量部署所需要的所有材料（部署包、配置文件等）后再开始部署操作。这样可以让部署操作都变成本地操作，大大提升部署的效率和速度。</li><li>使用如灰度发布或者负载均衡等方法降低全量部署对于应用可用性影响。同时还能够有效解耦部署和发布两个阶段，提高应用发布的灵活性。</li></ul><p>总结来说，对于现代系统中绝大部分状态无关的部署单元（应用、模块，微服务等），全量部署一般应是最优的选择，而对于像数据库这类与状态有关的系统，还是只能够使用增量部署，并且还要小心设计部署的流程、脚本及回滚策略</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用部署是工程人员（包括开发、测试和运维），每天需要面对的重要工作之一，尤其是交付比较频繁的项目，工程人员需要花费很多的时间和精力去完成越来越频繁的部署工作，那么部署的方式是选择增量部署还是全量部署呢？&lt;br&gt;
    
    </summary>
    
      <category term="持续集成" scheme="http://wrxiang.top/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="部署方案" scheme="http://wrxiang.top/tags/%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
</feed>
